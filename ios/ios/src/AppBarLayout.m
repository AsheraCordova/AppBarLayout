//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAppBarLayoutPlugin\src\main\java\com\google\android\material\appbar\AppBarLayout.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbsListView.h"
#include "AppBarLayout.h"
#include "CoordinatorLayout.h"
#include "DecelerateInterpolator.h"
#include "Drawable.h"
#include "HeaderBehavior.h"
#include "HeaderScrollingViewBehavior.h"
#include "IOSPrimitiveArray.h"
#include "Interpolator.h"
#include "J2ObjC_source.h"
#include "LinearLayout.h"
#include "MathUtils.h"
#include "NestedScrollingChild.h"
#include "Rect.h"
#include "ScrollView.h"
#include "ValueAnimator.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "WindowInsetsCompat.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASAppBarLayout () {
 @public
  int32_t currentOffset_;
  int32_t totalScrollRange_;
  int32_t downPreScrollRange_;
  int32_t downScrollRange_;
  bool haveChildWithInterpolator_;
  int32_t pendingAction_;
  ADXWindowInsetsCompat *lastInsets_;
  id<JavaUtilList> listeners_;
  bool liftableOverride_;
  bool liftable_;
  bool lifted_;
  bool liftOnScroll_;
  int32_t liftOnScrollTargetViewId_;
  JavaLangRefWeakReference *liftOnScrollTargetView_;
  bool hasLiftOnScrollColor_;
  id<JavaUtilList> liftOnScrollListeners_;
  ADDrawable *statusBarForeground_;
  float appBarElevation_;
  ASAppBarLayout_Behavior *behavior_;
}

- (bool)hasCollapsibleChild;

- (void)setExpandedWithBoolean:(bool)expanded
                   withBoolean:(bool)animate
                   withBoolean:(bool)force;

- (bool)setLiftableStateWithBoolean:(bool)liftable;

- (ADView *)findLiftOnScrollTargetViewWithADView:(ADView *)defaultScrollingView;

- (bool)shouldOffsetFirstChild;

- (void)invalidateScrollRanges;

- (bool)isLiftOnScrollCompatibleBackground;

- (void)startLiftOnScrollColorAnimationWithFloat:(float)fromValue
                                       withFloat:(float)toValue;

@end

J2OBJC_FIELD_SETTER(ASAppBarLayout, lastInsets_, ADXWindowInsetsCompat *)
J2OBJC_FIELD_SETTER(ASAppBarLayout, listeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASAppBarLayout, liftOnScrollTargetView_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ASAppBarLayout, liftOnScrollListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASAppBarLayout, statusBarForeground_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASAppBarLayout, behavior_, ASAppBarLayout_Behavior *)

inline int32_t ASAppBarLayout_get_INVALID_SCROLL_RANGE(void);
#define ASAppBarLayout_INVALID_SCROLL_RANGE -1
J2OBJC_STATIC_FIELD_CONSTANT(ASAppBarLayout, INVALID_SCROLL_RANGE, int32_t)

__attribute__((unused)) static bool ASAppBarLayout_hasCollapsibleChild(ASAppBarLayout *self);

__attribute__((unused)) static void ASAppBarLayout_setExpandedWithBoolean_withBoolean_withBoolean_(ASAppBarLayout *self, bool expanded, bool animate, bool force);

__attribute__((unused)) static int32_t ASAppBarLayout_getTotalScrollRange(ASAppBarLayout *self);

__attribute__((unused)) static bool ASAppBarLayout_setLiftableStateWithBoolean_(ASAppBarLayout *self, bool liftable);

__attribute__((unused)) static ADView *ASAppBarLayout_findLiftOnScrollTargetViewWithADView_(ASAppBarLayout *self, ADView *defaultScrollingView);

__attribute__((unused)) static int32_t ASAppBarLayout_getTopInset(ASAppBarLayout *self);

__attribute__((unused)) static bool ASAppBarLayout_shouldOffsetFirstChild(ASAppBarLayout *self);

__attribute__((unused)) static void ASAppBarLayout_invalidateScrollRanges(ASAppBarLayout *self);

__attribute__((unused)) static bool ASAppBarLayout_isLiftOnScrollCompatibleBackground(ASAppBarLayout *self);

__attribute__((unused)) static void ASAppBarLayout_startLiftOnScrollColorAnimationWithFloat_withFloat_(ASAppBarLayout *self, float fromValue, float toValue);

@interface ASAppBarLayout_BaseOnOffsetChangedListener : NSObject

@end

@interface ASAppBarLayout_OnOffsetChangedListener : NSObject

@end

@interface ASAppBarLayout_LiftOnScrollListener : NSObject

@end

@interface ASAppBarLayout_LayoutParams () {
 @public
  ASAppBarLayout_ChildScrollEffect *scrollEffect_;
}

@end

J2OBJC_FIELD_SETTER(ASAppBarLayout_LayoutParams, scrollEffect_, ASAppBarLayout_ChildScrollEffect *)

@interface ASAppBarLayout_BaseBehavior () {
 @public
  int32_t offsetDelta_;
  int32_t lastStartedType_;
  ADValueAnimator *offsetAnimator_;
  ASAppBarLayout_SavedState *savedState_;
  JavaLangRefWeakReference *lastNestedScrollingChildRef_;
  ASAppBarLayout_BaseBehavior_BaseDragCallback *onDragCallback_;
  bool coordinatorLayoutA11yScrollable_;
}

- (bool)canScrollChildrenWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                               withASAppBarLayout:(ASAppBarLayout *)child
                                       withADView:(ADView *)directTargetChild;

- (void)animateOffsetToWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                             withASAppBarLayout:(ASAppBarLayout *)child
                                        withInt:(int32_t)offset
                                      withFloat:(float)velocity;

- (void)animateOffsetWithDurationWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                       withASAppBarLayout:(ASAppBarLayout *)child
                                                  withInt:(int32_t)offset
                                                  withInt:(int32_t)duration;

- (int32_t)getChildIndexOnOffsetWithASAppBarLayout:(ASAppBarLayout *)abl
                                           withInt:(int32_t)offset;

- (void)snapToChildIfNeededWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                 withASAppBarLayout:(ASAppBarLayout *)abl;

- (int32_t)calculateSnapOffsetWithInt:(int32_t)value
                              withInt:(int32_t)bottom
                              withInt:(int32_t)top;

+ (bool)checkFlagWithInt:(int32_t)flags
                 withInt:(int32_t)check;

- (void)updateAccessibilityActionsWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                        withASAppBarLayout:(ASAppBarLayout *)appBarLayout;

- (ADView *)getChildWithScrollingBehaviorWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout;

- (bool)childrenHaveScrollFlagsWithASAppBarLayout:(ASAppBarLayout *)appBarLayout;

- (bool)addAccessibilityScrollActionsWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                           withASAppBarLayout:(ASAppBarLayout *)appBarLayout
                                                   withADView:(ADView *)scrollingView;

- (int32_t)interpolateOffsetWithASAppBarLayout:(ASAppBarLayout *)layout
                                       withInt:(int32_t)offset;

- (void)updateAppBarLayoutDrawableStateWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                             withASAppBarLayout:(ASAppBarLayout *)layout
                                                        withInt:(int32_t)offset
                                                        withInt:(int32_t)direction
                                                    withBoolean:(bool)forceJump;

- (bool)shouldJumpElevationStateWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                      withASAppBarLayout:(ASAppBarLayout *)layout;

+ (ADView *)getAppBarChildOnOffsetWithASAppBarLayout:(ASAppBarLayout *)layout
                                             withInt:(int32_t)offset;

- (ADView *)findFirstScrollingChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent;

@end

J2OBJC_FIELD_SETTER(ASAppBarLayout_BaseBehavior, offsetAnimator_, ADValueAnimator *)
J2OBJC_FIELD_SETTER(ASAppBarLayout_BaseBehavior, savedState_, ASAppBarLayout_SavedState *)
J2OBJC_FIELD_SETTER(ASAppBarLayout_BaseBehavior, lastNestedScrollingChildRef_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ASAppBarLayout_BaseBehavior, onDragCallback_, ASAppBarLayout_BaseBehavior_BaseDragCallback *)

inline int32_t ASAppBarLayout_BaseBehavior_get_MAX_OFFSET_ANIMATION_DURATION(void);
#define ASAppBarLayout_BaseBehavior_MAX_OFFSET_ANIMATION_DURATION 600
J2OBJC_STATIC_FIELD_CONSTANT(ASAppBarLayout_BaseBehavior, MAX_OFFSET_ANIMATION_DURATION, int32_t)

__attribute__((unused)) static bool ASAppBarLayout_BaseBehavior_canScrollChildrenWithADXCoordinatorLayout_withASAppBarLayout_withADView_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent, ASAppBarLayout *child, ADView *directTargetChild);

__attribute__((unused)) static void ASAppBarLayout_BaseBehavior_animateOffsetToWithADXCoordinatorLayout_withASAppBarLayout_withInt_withFloat_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *child, int32_t offset, float velocity);

__attribute__((unused)) static void ASAppBarLayout_BaseBehavior_animateOffsetWithDurationWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *child, int32_t offset, int32_t duration);

__attribute__((unused)) static int32_t ASAppBarLayout_BaseBehavior_getChildIndexOnOffsetWithASAppBarLayout_withInt_(ASAppBarLayout_BaseBehavior *self, ASAppBarLayout *abl, int32_t offset);

__attribute__((unused)) static void ASAppBarLayout_BaseBehavior_snapToChildIfNeededWithADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *abl);

__attribute__((unused)) static int32_t ASAppBarLayout_BaseBehavior_calculateSnapOffsetWithInt_withInt_withInt_(ASAppBarLayout_BaseBehavior *self, int32_t value, int32_t bottom, int32_t top);

__attribute__((unused)) static bool ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_(int32_t flags, int32_t check);

__attribute__((unused)) static void ASAppBarLayout_BaseBehavior_updateAccessibilityActionsWithADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *appBarLayout);

__attribute__((unused)) static ADView *ASAppBarLayout_BaseBehavior_getChildWithScrollingBehaviorWithADXCoordinatorLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout);

__attribute__((unused)) static bool ASAppBarLayout_BaseBehavior_childrenHaveScrollFlagsWithASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ASAppBarLayout *appBarLayout);

__attribute__((unused)) static bool ASAppBarLayout_BaseBehavior_addAccessibilityScrollActionsWithADXCoordinatorLayout_withASAppBarLayout_withADView_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *appBarLayout, ADView *scrollingView);

__attribute__((unused)) static int32_t ASAppBarLayout_BaseBehavior_interpolateOffsetWithASAppBarLayout_withInt_(ASAppBarLayout_BaseBehavior *self, ASAppBarLayout *layout, int32_t offset);

__attribute__((unused)) static void ASAppBarLayout_BaseBehavior_updateAppBarLayoutDrawableStateWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_withBoolean_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent, ASAppBarLayout *layout, int32_t offset, int32_t direction, bool forceJump);

__attribute__((unused)) static bool ASAppBarLayout_BaseBehavior_shouldJumpElevationStateWithADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent, ASAppBarLayout *layout);

__attribute__((unused)) static ADView *ASAppBarLayout_BaseBehavior_getAppBarChildOnOffsetWithASAppBarLayout_withInt_(ASAppBarLayout *layout, int32_t offset);

__attribute__((unused)) static ADView *ASAppBarLayout_BaseBehavior_findFirstScrollingChildWithADXCoordinatorLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent);

@interface ASAppBarLayout_BaseBehavior_1 : NSObject < ADValueAnimator_AnimatorUpdateListener > {
 @public
  ASAppBarLayout_BaseBehavior *this$0_;
  ADXCoordinatorLayout *val$coordinatorLayout_;
  ASAppBarLayout *val$child_;
}

- (instancetype)initWithASAppBarLayout_BaseBehavior:(ASAppBarLayout_BaseBehavior *)outer$
                           withADXCoordinatorLayout:(ADXCoordinatorLayout *)capture$0
                                 withASAppBarLayout:(ASAppBarLayout *)capture$1;

- (void)onAnimationUpdateWithADValueAnimator:(ADValueAnimator *)animator;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAppBarLayout_BaseBehavior_1)

__attribute__((unused)) static void ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior_1 *self, ASAppBarLayout_BaseBehavior *outer$, ADXCoordinatorLayout *capture$0, ASAppBarLayout *capture$1);

__attribute__((unused)) static ASAppBarLayout_BaseBehavior_1 *new_ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *outer$, ADXCoordinatorLayout *capture$0, ASAppBarLayout *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAppBarLayout_BaseBehavior_1 *create_ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *outer$, ADXCoordinatorLayout *capture$0, ASAppBarLayout *capture$1);


@interface ASAppBarLayout_ScrollingViewBehavior ()

- (void)offsetChildAsNeededWithADView:(ADView *)child
                           withADView:(ADView *)dependency;

+ (int32_t)getAppBarLayoutOffsetWithASAppBarLayout:(ASAppBarLayout *)abl;

- (void)updateLiftedStateIfNeededWithADView:(ADView *)child
                                 withADView:(ADView *)dependency;

@end

__attribute__((unused)) static void ASAppBarLayout_ScrollingViewBehavior_offsetChildAsNeededWithADView_withADView_(ASAppBarLayout_ScrollingViewBehavior *self, ADView *child, ADView *dependency);

__attribute__((unused)) static int32_t ASAppBarLayout_ScrollingViewBehavior_getAppBarLayoutOffsetWithASAppBarLayout_(ASAppBarLayout *abl);

__attribute__((unused)) static void ASAppBarLayout_ScrollingViewBehavior_updateLiftedStateIfNeededWithADView_withADView_(ASAppBarLayout_ScrollingViewBehavior *self, ADView *child, ADView *dependency);

@implementation ASAppBarLayout

- (void)addOnOffsetChangedListenerWithASAppBarLayout_BaseOnOffsetChangedListener:(id<ASAppBarLayout_BaseOnOffsetChangedListener>)listener {
  if (listeners_ == nil) {
    listeners_ = new_JavaUtilArrayList_init();
  }
  if (listener != nil && ![listeners_ containsWithId:listener]) {
    [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:listener];
  }
}

- (void)addOnOffsetChangedListenerWithASAppBarLayout_OnOffsetChangedListener:(id<ASAppBarLayout_OnOffsetChangedListener>)listener {
  [self addOnOffsetChangedListenerWithASAppBarLayout_BaseOnOffsetChangedListener:listener];
}

- (void)removeOnOffsetChangedListenerWithASAppBarLayout_BaseOnOffsetChangedListener:(id<ASAppBarLayout_BaseOnOffsetChangedListener>)listener {
  if (listeners_ != nil && listener != nil) {
    [listeners_ removeWithId:listener];
  }
}

- (void)removeOnOffsetChangedListenerWithASAppBarLayout_OnOffsetChangedListener:(id<ASAppBarLayout_OnOffsetChangedListener>)listener {
  [self removeOnOffsetChangedListenerWithASAppBarLayout_BaseOnOffsetChangedListener:listener];
}

- (void)addLiftOnScrollListenerWithASAppBarLayout_LiftOnScrollListener:(id<ASAppBarLayout_LiftOnScrollListener>)liftOnScrollListener {
  [((id<JavaUtilList>) nil_chk(liftOnScrollListeners_)) addWithId:liftOnScrollListener];
}

- (bool)removeLiftOnScrollListenerWithASAppBarLayout_LiftOnScrollListener:(id<ASAppBarLayout_LiftOnScrollListener>)liftOnScrollListener {
  return [((id<JavaUtilList>) nil_chk(liftOnScrollListeners_)) removeWithId:liftOnScrollListener];
}

- (void)clearLiftOnScrollListener {
  [((id<JavaUtilList>) nil_chk(liftOnScrollListeners_)) clear];
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  int32_t heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  if (heightMode != ADView_MeasureSpec_EXACTLY && ADXViewCompat_getFitsSystemWindowsWithADView_(self) && ASAppBarLayout_shouldOffsetFirstChild(self)) {
    int32_t newHeight = [self getMeasuredHeight];
    switch (heightMode) {
      case ADView_MeasureSpec_AT_MOST:
      newHeight = ADMathUtils_clampWithInt_withInt_withInt_([self getMeasuredHeight] + ASAppBarLayout_getTopInset(self), 0, ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec));
      break;
      case ADView_MeasureSpec_UNSPECIFIED:
      newHeight += ASAppBarLayout_getTopInset(self);
      break;
      case ADView_MeasureSpec_EXACTLY:
      default:
      ;
    }
    [self setMeasuredDimensionWithInt:[self getMeasuredWidth] withInt:newHeight];
  }
  ASAppBarLayout_invalidateScrollRanges(self);
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  if (ADXViewCompat_getFitsSystemWindowsWithADView_(self) && ASAppBarLayout_shouldOffsetFirstChild(self)) {
    int32_t topInset = ASAppBarLayout_getTopInset(self);
    for (int32_t z = [self getChildCount] - 1; z >= 0; z--) {
      ADXViewCompat_offsetTopAndBottomWithADView_withInt_([self getChildAtWithInt:z], topInset);
    }
  }
  ASAppBarLayout_invalidateScrollRanges(self);
  haveChildWithInterpolator_ = false;
  for (int32_t i = 0, z = [self getChildCount]; i < z; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ASAppBarLayout_LayoutParams *childLp = (ASAppBarLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    id<ADInterpolator> interpolator = [((ASAppBarLayout_LayoutParams *) nil_chk(childLp)) getScrollInterpolator];
    if (interpolator != nil) {
      haveChildWithInterpolator_ = true;
      break;
    }
  }
  if (statusBarForeground_ != nil) {
    [statusBarForeground_ setBoundsWithInt:0 withInt:0 withInt:[self getWidth] withInt:ASAppBarLayout_getTopInset(self)];
  }
  if (!liftableOverride_) {
    ASAppBarLayout_setLiftableStateWithBoolean_(self, liftOnScroll_ || ASAppBarLayout_hasCollapsibleChild(self));
  }
}

- (bool)hasCollapsibleChild {
  return ASAppBarLayout_hasCollapsibleChild(self);
}

- (void)setOrientationWithInt:(int32_t)orientation {
  if (orientation != ADLinearLayout_VERTICAL) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"AppBarLayout is always vertical and does not support horizontal orientation");
  }
  [super setOrientationWithInt:orientation];
}

- (ADXCoordinatorLayout_Behavior *)getBehavior {
  behavior_ = new_ASAppBarLayout_Behavior_init();
  return behavior_;
}

- (void)setExpandedWithBoolean:(bool)expanded {
  [self setExpandedWithBoolean:expanded withBoolean:ADXViewCompat_isLaidOutWithADView_(self)];
}

- (void)setExpandedWithBoolean:(bool)expanded
                   withBoolean:(bool)animate {
  ASAppBarLayout_setExpandedWithBoolean_withBoolean_withBoolean_(self, expanded, animate, true);
}

- (void)setExpandedWithBoolean:(bool)expanded
                   withBoolean:(bool)animate
                   withBoolean:(bool)force {
  ASAppBarLayout_setExpandedWithBoolean_withBoolean_withBoolean_(self, expanded, animate, force);
}

- (bool)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[ASAppBarLayout_LayoutParams class]];
}

- (ASAppBarLayout_LayoutParams *)generateDefaultLayoutParams {
  return new_ASAppBarLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
}

- (bool)hasChildWithInterpolator {
  return haveChildWithInterpolator_;
}

- (int32_t)getTotalScrollRange {
  return ASAppBarLayout_getTotalScrollRange(self);
}

- (bool)hasScrollableChildren {
  return ASAppBarLayout_getTotalScrollRange(self) != 0;
}

- (int32_t)getUpNestedPreScrollRange {
  return ASAppBarLayout_getTotalScrollRange(self);
}

- (int32_t)getDownNestedPreScrollRange {
  if (downPreScrollRange_ != ASAppBarLayout_INVALID_SCROLL_RANGE) {
    return downPreScrollRange_;
  }
  int32_t range = 0;
  for (int32_t i = [self getChildCount] - 1; i >= 0; i--) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ASAppBarLayout_LayoutParams *lp = (ASAppBarLayout_LayoutParams *) cast_chk([child getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    int32_t childHeight = [child getMeasuredHeight];
    int32_t flags = ((ASAppBarLayout_LayoutParams *) nil_chk(lp))->scrollFlags_;
    if ((flags & ASAppBarLayout_LayoutParams_FLAG_QUICK_RETURN) == ASAppBarLayout_LayoutParams_FLAG_QUICK_RETURN) {
      int32_t childRange = lp->topMargin_ + lp->bottomMargin_;
      if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED) != 0) {
        childRange += ADXViewCompat_getMinimumHeightWithADView_(child);
      }
      else if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED) != 0) {
        childRange += childHeight - ADXViewCompat_getMinimumHeightWithADView_(child);
      }
      else {
        childRange += childHeight;
      }
      if (i == 0 && ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
        childRange = JavaLangMath_minWithInt_withInt_(childRange, childHeight - ASAppBarLayout_getTopInset(self));
      }
      range += childRange;
    }
    else if (range > 0) {
      break;
    }
  }
  return downPreScrollRange_ = JavaLangMath_maxWithInt_withInt_(0, range);
}

- (int32_t)getDownNestedScrollRange {
  if (downScrollRange_ != ASAppBarLayout_INVALID_SCROLL_RANGE) {
    return downScrollRange_;
  }
  int32_t range = 0;
  for (int32_t i = 0, z = [self getChildCount]; i < z; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ASAppBarLayout_LayoutParams *lp = (ASAppBarLayout_LayoutParams *) cast_chk([child getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    int32_t childHeight = [child getMeasuredHeight];
    childHeight += ((ASAppBarLayout_LayoutParams *) nil_chk(lp))->topMargin_ + lp->bottomMargin_;
    int32_t flags = lp->scrollFlags_;
    if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL) != 0) {
      range += childHeight;
      if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED) != 0) {
        range -= ADXViewCompat_getMinimumHeightWithADView_(child);
        break;
      }
    }
    else {
      break;
    }
  }
  return downScrollRange_ = JavaLangMath_maxWithInt_withInt_(0, range);
}

- (void)onOffsetChangedWithInt:(int32_t)offset {
  currentOffset_ = offset;
  if (listeners_ != nil) {
    for (int32_t i = 0, z = [listeners_ size]; i < z; i++) {
      id<ASAppBarLayout_BaseOnOffsetChangedListener> listener = [((id<JavaUtilList>) nil_chk(listeners_)) getWithInt:i];
      if (listener != nil) {
        [listener onOffsetChangedWithASAppBarLayout:self withInt:offset];
      }
    }
  }
}

- (int32_t)getMinimumHeightForVisibleOverlappingContent {
  int32_t topInset = ASAppBarLayout_getTopInset(self);
  int32_t minHeight = ADXViewCompat_getMinimumHeightWithADView_(self);
  if (minHeight != 0) {
    return (minHeight * 2) + topInset;
  }
  int32_t childCount = [self getChildCount];
  int32_t lastChildMinHeight = childCount >= 1 ? ADXViewCompat_getMinimumHeightWithADView_([self getChildAtWithInt:childCount - 1]) : 0;
  if (lastChildMinHeight != 0) {
    return (lastChildMinHeight * 2) + topInset;
  }
  return JreIntDiv([self getHeight], 3);
}

- (bool)setLiftableWithBoolean:(bool)liftable {
  self->liftableOverride_ = true;
  return ASAppBarLayout_setLiftableStateWithBoolean_(self, liftable);
}

- (void)setLiftableOverrideEnabledWithBoolean:(bool)enabled {
  self->liftableOverride_ = enabled;
}

- (bool)setLiftableStateWithBoolean:(bool)liftable {
  return ASAppBarLayout_setLiftableStateWithBoolean_(self, liftable);
}

- (bool)isLifted {
  return lifted_;
}

- (bool)setLiftedStateWithBoolean:(bool)lifted {
  return [self setLiftedStateWithBoolean:lifted withBoolean:!liftableOverride_];
}

- (bool)setLiftedStateWithBoolean:(bool)lifted
                      withBoolean:(bool)force {
  if (force && self->lifted_ != lifted) {
    self->lifted_ = lifted;
    [self refreshDrawableState];
    if (ASAppBarLayout_isLiftOnScrollCompatibleBackground(self)) {
      if (hasLiftOnScrollColor_) {
        ASAppBarLayout_startLiftOnScrollColorAnimationWithFloat_withFloat_(self, lifted ? 0 : 1, lifted ? 1 : 0);
      }
      else if (liftOnScroll_) {
        ASAppBarLayout_startLiftOnScrollColorAnimationWithFloat_withFloat_(self, lifted ? 0 : appBarElevation_, lifted ? appBarElevation_ : 0);
      }
    }
    return true;
  }
  return false;
}

- (void)setLiftOnScrollWithBoolean:(bool)liftOnScroll {
  self->liftOnScroll_ = liftOnScroll;
}

- (bool)isLiftOnScroll {
  return liftOnScroll_;
}

- (bool)shouldLiftWithADView:(ADView *)defaultScrollingView {
  ADView *scrollingView = ASAppBarLayout_findLiftOnScrollTargetViewWithADView_(self, defaultScrollingView);
  if (scrollingView == nil) {
    scrollingView = defaultScrollingView;
  }
  return scrollingView != nil && ([scrollingView canScrollVerticallyWithInt:-1] || [scrollingView getScrollY] > 0);
}

- (ADView *)findLiftOnScrollTargetViewWithADView:(ADView *)defaultScrollingView {
  return ASAppBarLayout_findLiftOnScrollTargetViewWithADView_(self, defaultScrollingView);
}

- (int32_t)getPendingAction {
  return pendingAction_;
}

- (void)resetPendingAction {
  pendingAction_ = ASAppBarLayout_PENDING_ACTION_NONE;
}

- (int32_t)getTopInset {
  return ASAppBarLayout_getTopInset(self);
}

- (bool)shouldOffsetFirstChild {
  return ASAppBarLayout_shouldOffsetFirstChild(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAppBarLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)invalidateScrollRanges {
  ASAppBarLayout_invalidateScrollRanges(self);
}

- (bool)isLiftOnScrollCompatibleBackground {
  return ASAppBarLayout_isLiftOnScrollCompatibleBackground(self);
}

- (void)startLiftOnScrollColorAnimationWithFloat:(float)fromValue
                                       withFloat:(float)toValue {
  ASAppBarLayout_startLiftOnScrollColorAnimationWithFloat_withFloat_(self, fromValue, toValue);
}

- (ADDrawable *)getStateListAnimator {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXCoordinatorLayout_Behavior;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "LASAppBarLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 23, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 24, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 24, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 26, 27, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 28, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addOnOffsetChangedListenerWithASAppBarLayout_BaseOnOffsetChangedListener:);
  methods[1].selector = @selector(addOnOffsetChangedListenerWithASAppBarLayout_OnOffsetChangedListener:);
  methods[2].selector = @selector(removeOnOffsetChangedListenerWithASAppBarLayout_BaseOnOffsetChangedListener:);
  methods[3].selector = @selector(removeOnOffsetChangedListenerWithASAppBarLayout_OnOffsetChangedListener:);
  methods[4].selector = @selector(addLiftOnScrollListenerWithASAppBarLayout_LiftOnScrollListener:);
  methods[5].selector = @selector(removeLiftOnScrollListenerWithASAppBarLayout_LiftOnScrollListener:);
  methods[6].selector = @selector(clearLiftOnScrollListener);
  methods[7].selector = @selector(onMeasureWithInt:withInt:);
  methods[8].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[9].selector = @selector(hasCollapsibleChild);
  methods[10].selector = @selector(setOrientationWithInt:);
  methods[11].selector = @selector(getBehavior);
  methods[12].selector = @selector(setExpandedWithBoolean:);
  methods[13].selector = @selector(setExpandedWithBoolean:withBoolean:);
  methods[14].selector = @selector(setExpandedWithBoolean:withBoolean:withBoolean:);
  methods[15].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[16].selector = @selector(generateDefaultLayoutParams);
  methods[17].selector = @selector(hasChildWithInterpolator);
  methods[18].selector = @selector(getTotalScrollRange);
  methods[19].selector = @selector(hasScrollableChildren);
  methods[20].selector = @selector(getUpNestedPreScrollRange);
  methods[21].selector = @selector(getDownNestedPreScrollRange);
  methods[22].selector = @selector(getDownNestedScrollRange);
  methods[23].selector = @selector(onOffsetChangedWithInt:);
  methods[24].selector = @selector(getMinimumHeightForVisibleOverlappingContent);
  methods[25].selector = @selector(setLiftableWithBoolean:);
  methods[26].selector = @selector(setLiftableOverrideEnabledWithBoolean:);
  methods[27].selector = @selector(setLiftableStateWithBoolean:);
  methods[28].selector = @selector(isLifted);
  methods[29].selector = @selector(setLiftedStateWithBoolean:);
  methods[30].selector = @selector(setLiftedStateWithBoolean:withBoolean:);
  methods[31].selector = @selector(setLiftOnScrollWithBoolean:);
  methods[32].selector = @selector(isLiftOnScroll);
  methods[33].selector = @selector(shouldLiftWithADView:);
  methods[34].selector = @selector(findLiftOnScrollTargetViewWithADView:);
  methods[35].selector = @selector(getPendingAction);
  methods[36].selector = @selector(resetPendingAction);
  methods[37].selector = @selector(getTopInset);
  methods[38].selector = @selector(shouldOffsetFirstChild);
  methods[39].selector = @selector(init);
  methods[40].selector = @selector(invalidateScrollRanges);
  methods[41].selector = @selector(isLiftOnScrollCompatibleBackground);
  methods[42].selector = @selector(startLiftOnScrollColorAnimationWithFloat:withFloat:);
  methods[43].selector = @selector(getStateListAnimator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PENDING_ACTION_NONE", "I", .constantValue.asInt = ASAppBarLayout_PENDING_ACTION_NONE, 0x18, -1, -1, -1, -1 },
    { "PENDING_ACTION_EXPANDED", "I", .constantValue.asInt = ASAppBarLayout_PENDING_ACTION_EXPANDED, 0x18, -1, -1, -1, -1 },
    { "PENDING_ACTION_COLLAPSED", "I", .constantValue.asInt = ASAppBarLayout_PENDING_ACTION_COLLAPSED, 0x18, -1, -1, -1, -1 },
    { "PENDING_ACTION_ANIMATE_ENABLED", "I", .constantValue.asInt = ASAppBarLayout_PENDING_ACTION_ANIMATE_ENABLED, 0x18, -1, -1, -1, -1 },
    { "PENDING_ACTION_FORCE", "I", .constantValue.asInt = ASAppBarLayout_PENDING_ACTION_FORCE, 0x18, -1, -1, -1, -1 },
    { "INVALID_SCROLL_RANGE", "I", .constantValue.asInt = ASAppBarLayout_INVALID_SCROLL_RANGE, 0x1a, -1, -1, -1, -1 },
    { "currentOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalScrollRange_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "downPreScrollRange_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "downScrollRange_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "haveChildWithInterpolator_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingAction_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastInsets_", "LADXWindowInsetsCompat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 31, -1 },
    { "liftableOverride_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "liftable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lifted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "liftOnScroll_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "liftOnScrollTargetViewId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "liftOnScrollTargetView_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 32, -1 },
    { "hasLiftOnScrollColor_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "liftOnScrollListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 33, -1 },
    { "statusBarForeground_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "appBarElevation_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "behavior_", "LASAppBarLayout_Behavior;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addOnOffsetChangedListener", "LASAppBarLayout_BaseOnOffsetChangedListener;", "LASAppBarLayout_OnOffsetChangedListener;", "removeOnOffsetChangedListener", "addLiftOnScrollListener", "LASAppBarLayout_LiftOnScrollListener;", "removeLiftOnScrollListener", "onMeasure", "II", "onLayout", "ZIIII", "setOrientation", "I", "()Landroidx/coordinatorlayout/widget/CoordinatorLayout$Behavior<Lcom/google/android/material/appbar/AppBarLayout;>;", "setExpanded", "Z", "ZZ", "ZZZ", "checkLayoutParams", "LADViewGroup_LayoutParams;", "onOffsetChanged", "setLiftable", "setLiftableOverrideEnabled", "setLiftableState", "setLiftedState", "setLiftOnScroll", "shouldLift", "LADView;", "findLiftOnScrollTargetView", "startLiftOnScrollColorAnimation", "FF", "Ljava/util/List<Lcom/google/android/material/appbar/AppBarLayout$BaseOnOffsetChangedListener;>;", "Ljava/lang/ref/WeakReference<Lr/android/view/View;>;", "Ljava/util/List<Lcom/google/android/material/appbar/AppBarLayout$LiftOnScrollListener;>;", "LASAppBarLayout_BaseOnOffsetChangedListener;LASAppBarLayout_OnOffsetChangedListener;LASAppBarLayout_LiftOnScrollListener;LASAppBarLayout_LayoutParams;LASAppBarLayout_Behavior;LASAppBarLayout_BaseBehavior;LASAppBarLayout_ScrollingViewBehavior;LASAppBarLayout_ChildScrollEffect;LASAppBarLayout_SavedState;" };
  static const J2ObjcClassInfo _ASAppBarLayout = { "AppBarLayout", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0x1, 44, 25, -1, 34, -1, -1, -1 };
  return &_ASAppBarLayout;
}

@end

bool ASAppBarLayout_hasCollapsibleChild(ASAppBarLayout *self) {
  for (int32_t i = 0, z = [self getChildCount]; i < z; i++) {
    if ([((ASAppBarLayout_LayoutParams *) nil_chk(((ASAppBarLayout_LayoutParams *) cast_chk([((ADView *) nil_chk([self getChildAtWithInt:i])) getLayoutParams], [ASAppBarLayout_LayoutParams class])))) isCollapsible]) {
      return true;
    }
  }
  return false;
}

void ASAppBarLayout_setExpandedWithBoolean_withBoolean_withBoolean_(ASAppBarLayout *self, bool expanded, bool animate, bool force) {
  self->pendingAction_ = (expanded ? ASAppBarLayout_PENDING_ACTION_EXPANDED : ASAppBarLayout_PENDING_ACTION_COLLAPSED) | (animate ? ASAppBarLayout_PENDING_ACTION_ANIMATE_ENABLED : 0) | (force ? ASAppBarLayout_PENDING_ACTION_FORCE : 0);
  [self requestLayout];
}

int32_t ASAppBarLayout_getTotalScrollRange(ASAppBarLayout *self) {
  if (self->totalScrollRange_ != ASAppBarLayout_INVALID_SCROLL_RANGE) {
    return self->totalScrollRange_;
  }
  int32_t range = 0;
  for (int32_t i = 0, z = [self getChildCount]; i < z; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ASAppBarLayout_LayoutParams *lp = (ASAppBarLayout_LayoutParams *) cast_chk([child getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    int32_t childHeight = [child getMeasuredHeight];
    int32_t flags = ((ASAppBarLayout_LayoutParams *) nil_chk(lp))->scrollFlags_;
    if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL) != 0) {
      range += childHeight + lp->topMargin_ + lp->bottomMargin_;
      if (i == 0 && ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
        range -= ASAppBarLayout_getTopInset(self);
      }
      if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED) != 0) {
        range -= ADXViewCompat_getMinimumHeightWithADView_(child);
        break;
      }
    }
    else {
      break;
    }
  }
  return self->totalScrollRange_ = JavaLangMath_maxWithInt_withInt_(0, range);
}

bool ASAppBarLayout_setLiftableStateWithBoolean_(ASAppBarLayout *self, bool liftable) {
  if (self->liftable_ != liftable) {
    self->liftable_ = liftable;
    [self refreshDrawableState];
    return true;
  }
  return false;
}

ADView *ASAppBarLayout_findLiftOnScrollTargetViewWithADView_(ASAppBarLayout *self, ADView *defaultScrollingView) {
  if (self->liftOnScrollTargetView_ == nil && self->liftOnScrollTargetViewId_ != ADView_NO_ID) {
    ADView *targetView = nil;
    if (defaultScrollingView != nil) {
      targetView = [defaultScrollingView findViewByIdWithInt:self->liftOnScrollTargetViewId_];
    }
    if (targetView == nil && [[self getParent] isKindOfClass:[ADViewGroup class]]) {
      targetView = [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk([self getParent], [ADViewGroup class])))) findViewByIdWithInt:self->liftOnScrollTargetViewId_];
    }
    if (targetView != nil) {
      self->liftOnScrollTargetView_ = new_JavaLangRefWeakReference_initWithId_(targetView);
    }
  }
  return self->liftOnScrollTargetView_ != nil ? [self->liftOnScrollTargetView_ get] : nil;
}

int32_t ASAppBarLayout_getTopInset(ASAppBarLayout *self) {
  return self->lastInsets_ != nil ? [self->lastInsets_ getSystemWindowInsetTop] : 0;
}

bool ASAppBarLayout_shouldOffsetFirstChild(ASAppBarLayout *self) {
  if ([self getChildCount] > 0) {
    ADView *firstChild = [self getChildAtWithInt:0];
    return [((ADView *) nil_chk(firstChild)) getVisibility] != ADView_GONE && !ADXViewCompat_getFitsSystemWindowsWithADView_(firstChild);
  }
  return false;
}

void ASAppBarLayout_init(ASAppBarLayout *self) {
  ADLinearLayout_init(self);
  self->totalScrollRange_ = ASAppBarLayout_INVALID_SCROLL_RANGE;
  self->downPreScrollRange_ = ASAppBarLayout_INVALID_SCROLL_RANGE;
  self->downScrollRange_ = ASAppBarLayout_INVALID_SCROLL_RANGE;
  self->pendingAction_ = ASAppBarLayout_PENDING_ACTION_NONE;
  self->liftOnScrollListeners_ = new_JavaUtilArrayList_init();
  self->hasLiftOnScrollColor_ = false;
  self->appBarElevation_ = 0;
  [self setOrientationWithInt:ADLinearLayout_VERTICAL];
}

ASAppBarLayout *new_ASAppBarLayout_init() {
  J2OBJC_NEW_IMPL(ASAppBarLayout, init)
}

ASAppBarLayout *create_ASAppBarLayout_init() {
  J2OBJC_CREATE_IMPL(ASAppBarLayout, init)
}

void ASAppBarLayout_invalidateScrollRanges(ASAppBarLayout *self) {
}

bool ASAppBarLayout_isLiftOnScrollCompatibleBackground(ASAppBarLayout *self) {
  return false;
}

void ASAppBarLayout_startLiftOnScrollColorAnimationWithFloat_withFloat_(ASAppBarLayout *self, float fromValue, float toValue) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout)

J2OBJC_NAME_MAPPING(ASAppBarLayout, "com.google.android.material.appbar", "AS")

@implementation ASAppBarLayout_BaseOnOffsetChangedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onOffsetChangedWithASAppBarLayout:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onOffsetChanged", "LASAppBarLayout;I", "(TT;I)V", "LASAppBarLayout;", "<T:Lcom/google/android/material/appbar/AppBarLayout;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ASAppBarLayout_BaseOnOffsetChangedListener = { "BaseOnOffsetChangedListener", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_ASAppBarLayout_BaseOnOffsetChangedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASAppBarLayout_BaseOnOffsetChangedListener)

@implementation ASAppBarLayout_OnOffsetChangedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onOffsetChangedWithASAppBarLayout:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onOffsetChanged", "LASAppBarLayout;I", "LASAppBarLayout;", "Ljava/lang/Object;Lcom/google/android/material/appbar/AppBarLayout$BaseOnOffsetChangedListener<Lcom/google/android/material/appbar/AppBarLayout;>;" };
  static const J2ObjcClassInfo _ASAppBarLayout_OnOffsetChangedListener = { "OnOffsetChangedListener", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, 3, -1 };
  return &_ASAppBarLayout_OnOffsetChangedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASAppBarLayout_OnOffsetChangedListener)

@implementation ASAppBarLayout_LiftOnScrollListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onUpdateWithFloat:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onUpdate", "FI", "LASAppBarLayout;" };
  static const J2ObjcClassInfo _ASAppBarLayout_LiftOnScrollListener = { "LiftOnScrollListener", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASAppBarLayout_LiftOnScrollListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASAppBarLayout_LiftOnScrollListener)

@implementation ASAppBarLayout_LayoutParams

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height {
  ASAppBarLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height
                  withFloat:(float)weight {
  ASAppBarLayout_LayoutParams_initWithInt_withInt_withFloat_(self, width, height, weight);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  ASAppBarLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  return self;
}

- (instancetype)initWithASAppBarLayout_LayoutParams:(ASAppBarLayout_LayoutParams *)source {
  ASAppBarLayout_LayoutParams_initWithASAppBarLayout_LayoutParams_(self, source);
  return self;
}

- (void)setScrollFlagsWithInt:(int32_t)flags {
  scrollFlags_ = flags;
}

- (int32_t)getScrollFlags {
  return scrollFlags_;
}

- (ASAppBarLayout_ChildScrollEffect *)getScrollEffect {
  return scrollEffect_;
}

- (void)setScrollInterpolatorWithADInterpolator:(id<ADInterpolator>)interpolator {
  scrollInterpolator_ = interpolator;
}

- (id<ADInterpolator>)getScrollInterpolator {
  return scrollInterpolator_;
}

- (bool)isCollapsible {
  return (scrollFlags_ & ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL) == ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL && (scrollFlags_ & ASAppBarLayout_LayoutParams_COLLAPSIBLE_FLAGS) != 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAppBarLayout_ChildScrollEffect;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LADInterpolator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withFloat:);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(initWithASAppBarLayout_LayoutParams:);
  methods[4].selector = @selector(setScrollFlagsWithInt:);
  methods[5].selector = @selector(getScrollFlags);
  methods[6].selector = @selector(getScrollEffect);
  methods[7].selector = @selector(setScrollInterpolatorWithADInterpolator:);
  methods[8].selector = @selector(getScrollInterpolator);
  methods[9].selector = @selector(isCollapsible);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SCROLL_FLAG_NO_SCROLL", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_NO_SCROLL, 0x19, -1, -1, -1, -1 },
    { "SCROLL_FLAG_SCROLL", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL, 0x19, -1, -1, -1, -1 },
    { "SCROLL_FLAG_EXIT_UNTIL_COLLAPSED", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED, 0x19, -1, -1, -1, -1 },
    { "SCROLL_FLAG_ENTER_ALWAYS", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_ENTER_ALWAYS, 0x19, -1, -1, -1, -1 },
    { "SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED, 0x19, -1, -1, -1, -1 },
    { "SCROLL_FLAG_SNAP", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SNAP, 0x19, -1, -1, -1, -1 },
    { "SCROLL_FLAG_SNAP_MARGINS", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SNAP_MARGINS, 0x19, -1, -1, -1, -1 },
    { "FLAG_QUICK_RETURN", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_FLAG_QUICK_RETURN, 0x18, -1, -1, -1, -1 },
    { "FLAG_SNAP", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_FLAG_SNAP, 0x18, -1, -1, -1, -1 },
    { "COLLAPSIBLE_FLAGS", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_COLLAPSIBLE_FLAGS, 0x18, -1, -1, -1, -1 },
    { "scrollFlags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "SCROLL_EFFECT_NONE", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_EFFECT_NONE, 0x19, -1, -1, -1, -1 },
    { "SCROLL_EFFECT_COMPRESS", "I", .constantValue.asInt = ASAppBarLayout_LayoutParams_SCROLL_EFFECT_COMPRESS, 0x19, -1, -1, -1, -1 },
    { "scrollEffect_", "LASAppBarLayout_ChildScrollEffect;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollInterpolator_", "LADInterpolator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "IIF", "LADViewGroup_LayoutParams;", "LASAppBarLayout_LayoutParams;", "setScrollFlags", "I", "setScrollInterpolator", "LADInterpolator;", "LASAppBarLayout;" };
  static const J2ObjcClassInfo _ASAppBarLayout_LayoutParams = { "LayoutParams", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0x9, 10, 15, 8, -1, -1, -1, -1 };
  return &_ASAppBarLayout_LayoutParams;
}

@end

void ASAppBarLayout_LayoutParams_initWithInt_withInt_(ASAppBarLayout_LayoutParams *self, int32_t width, int32_t height) {
  ADLinearLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  self->scrollFlags_ = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL;
}

ASAppBarLayout_LayoutParams *new_ASAppBarLayout_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_NEW_IMPL(ASAppBarLayout_LayoutParams, initWithInt_withInt_, width, height)
}

ASAppBarLayout_LayoutParams *create_ASAppBarLayout_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_LayoutParams, initWithInt_withInt_, width, height)
}

void ASAppBarLayout_LayoutParams_initWithInt_withInt_withFloat_(ASAppBarLayout_LayoutParams *self, int32_t width, int32_t height, float weight) {
  ADLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(self, width, height, weight);
  self->scrollFlags_ = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL;
}

ASAppBarLayout_LayoutParams *new_ASAppBarLayout_LayoutParams_initWithInt_withInt_withFloat_(int32_t width, int32_t height, float weight) {
  J2OBJC_NEW_IMPL(ASAppBarLayout_LayoutParams, initWithInt_withInt_withFloat_, width, height, weight)
}

ASAppBarLayout_LayoutParams *create_ASAppBarLayout_LayoutParams_initWithInt_withInt_withFloat_(int32_t width, int32_t height, float weight) {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_LayoutParams, initWithInt_withInt_withFloat_, width, height, weight)
}

void ASAppBarLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ASAppBarLayout_LayoutParams *self, ADViewGroup_LayoutParams *p) {
  ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  self->scrollFlags_ = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL;
}

ASAppBarLayout_LayoutParams *new_ASAppBarLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_NEW_IMPL(ASAppBarLayout_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

ASAppBarLayout_LayoutParams *create_ASAppBarLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

void ASAppBarLayout_LayoutParams_initWithASAppBarLayout_LayoutParams_(ASAppBarLayout_LayoutParams *self, ASAppBarLayout_LayoutParams *source) {
  ADLinearLayout_LayoutParams_initWithADLinearLayout_LayoutParams_(self, source);
  self->scrollFlags_ = ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL;
  self->scrollFlags_ = ((ASAppBarLayout_LayoutParams *) nil_chk(source))->scrollFlags_;
  self->scrollEffect_ = source->scrollEffect_;
  self->scrollInterpolator_ = source->scrollInterpolator_;
}

ASAppBarLayout_LayoutParams *new_ASAppBarLayout_LayoutParams_initWithASAppBarLayout_LayoutParams_(ASAppBarLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ASAppBarLayout_LayoutParams, initWithASAppBarLayout_LayoutParams_, source)
}

ASAppBarLayout_LayoutParams *create_ASAppBarLayout_LayoutParams_initWithASAppBarLayout_LayoutParams_(ASAppBarLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_LayoutParams, initWithASAppBarLayout_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_LayoutParams)

@implementation ASAppBarLayout_BaseBehavior

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAppBarLayout_BaseBehavior_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (bool)onStartNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                         withADView:(ASAppBarLayout *)child
                                         withADView:(ADView *)directTargetChild
                                         withADView:(ADView *)target
                                            withInt:(int32_t)nestedScrollAxes
                                            withInt:(int32_t)type {
  bool started = (nestedScrollAxes & ADXViewCompat_SCROLL_AXIS_VERTICAL) != 0 && ([((ASAppBarLayout *) nil_chk(child)) isLiftOnScroll] || ASAppBarLayout_BaseBehavior_canScrollChildrenWithADXCoordinatorLayout_withASAppBarLayout_withADView_(self, parent, child, directTargetChild));
  if (started && offsetAnimator_ != nil) {
    [offsetAnimator_ cancel];
  }
  lastNestedScrollingChildRef_ = nil;
  lastStartedType_ = type;
  return started;
}

- (bool)canScrollChildrenWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                               withASAppBarLayout:(ASAppBarLayout *)child
                                       withADView:(ADView *)directTargetChild {
  return ASAppBarLayout_BaseBehavior_canScrollChildrenWithADXCoordinatorLayout_withASAppBarLayout_withADView_(self, parent, child, directTargetChild);
}

- (void)onNestedPreScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                       withADView:(ASAppBarLayout *)child
                                       withADView:(ADView *)target
                                          withInt:(int32_t)dx
                                          withInt:(int32_t)dy
                                     withIntArray:(IOSIntArray *)consumed
                                          withInt:(int32_t)type {
  if (dy != 0) {
    int32_t min;
    int32_t max;
    if (dy < 0) {
      min = -ASAppBarLayout_getTotalScrollRange(nil_chk(child));
      max = min + [child getDownNestedPreScrollRange];
    }
    else {
      min = -[((ASAppBarLayout *) nil_chk(child)) getUpNestedPreScrollRange];
      max = 0;
    }
    if (min != max) {
      *IOSIntArray_GetRef(nil_chk(consumed), 1) = [self scrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withInt:dy withInt:min withInt:max];
    }
  }
  if ([((ASAppBarLayout *) nil_chk(child)) isLiftOnScroll]) {
    [child setLiftedStateWithBoolean:[child shouldLiftWithADView:target]];
  }
}

- (void)onNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                    withADView:(ASAppBarLayout *)child
                                    withADView:(ADView *)target
                                       withInt:(int32_t)dxConsumed
                                       withInt:(int32_t)dyConsumed
                                       withInt:(int32_t)dxUnconsumed
                                       withInt:(int32_t)dyUnconsumed
                                       withInt:(int32_t)type
                                  withIntArray:(IOSIntArray *)consumed {
  if (dyUnconsumed < 0) {
    *IOSIntArray_GetRef(nil_chk(consumed), 1) = [self scrollWithADXCoordinatorLayout:coordinatorLayout withADView:child withInt:dyUnconsumed withInt:-[((ASAppBarLayout *) nil_chk(child)) getDownNestedScrollRange] withInt:0];
  }
  if (dyUnconsumed == 0) {
    ASAppBarLayout_BaseBehavior_updateAccessibilityActionsWithADXCoordinatorLayout_withASAppBarLayout_(self, coordinatorLayout, child);
  }
}

- (void)onStopNestedScrollWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                        withADView:(ASAppBarLayout *)abl
                                        withADView:(ADView *)target
                                           withInt:(int32_t)type {
  if (lastStartedType_ == ADXViewCompat_TYPE_TOUCH || type == ADXViewCompat_TYPE_NON_TOUCH) {
    ASAppBarLayout_BaseBehavior_snapToChildIfNeededWithADXCoordinatorLayout_withASAppBarLayout_(self, coordinatorLayout, abl);
    if ([((ASAppBarLayout *) nil_chk(abl)) isLiftOnScroll]) {
      [abl setLiftedStateWithBoolean:[abl shouldLiftWithADView:target]];
    }
  }
  lastNestedScrollingChildRef_ = new_JavaLangRefWeakReference_initWithId_(target);
}

- (void)setDragCallbackWithASAppBarLayout_BaseBehavior_BaseDragCallback:(ASAppBarLayout_BaseBehavior_BaseDragCallback *)callback {
  onDragCallback_ = callback;
}

- (void)animateOffsetToWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                             withASAppBarLayout:(ASAppBarLayout *)child
                                        withInt:(int32_t)offset
                                      withFloat:(float)velocity {
  ASAppBarLayout_BaseBehavior_animateOffsetToWithADXCoordinatorLayout_withASAppBarLayout_withInt_withFloat_(self, coordinatorLayout, child, offset, velocity);
}

- (void)animateOffsetWithDurationWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                       withASAppBarLayout:(ASAppBarLayout *)child
                                                  withInt:(int32_t)offset
                                                  withInt:(int32_t)duration {
  ASAppBarLayout_BaseBehavior_animateOffsetWithDurationWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_(self, coordinatorLayout, child, offset, duration);
}

- (int32_t)getChildIndexOnOffsetWithASAppBarLayout:(ASAppBarLayout *)abl
                                           withInt:(int32_t)offset {
  return ASAppBarLayout_BaseBehavior_getChildIndexOnOffsetWithASAppBarLayout_withInt_(self, abl, offset);
}

- (void)snapToChildIfNeededWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                 withASAppBarLayout:(ASAppBarLayout *)abl {
  ASAppBarLayout_BaseBehavior_snapToChildIfNeededWithADXCoordinatorLayout_withASAppBarLayout_(self, coordinatorLayout, abl);
}

- (int32_t)calculateSnapOffsetWithInt:(int32_t)value
                              withInt:(int32_t)bottom
                              withInt:(int32_t)top {
  return ASAppBarLayout_BaseBehavior_calculateSnapOffsetWithInt_withInt_withInt_(self, value, bottom, top);
}

+ (bool)checkFlagWithInt:(int32_t)flags
                 withInt:(int32_t)check {
  return ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_(flags, check);
}

- (bool)onMeasureChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                    withADView:(ASAppBarLayout *)child
                                       withInt:(int32_t)parentWidthMeasureSpec
                                       withInt:(int32_t)widthUsed
                                       withInt:(int32_t)parentHeightMeasureSpec
                                       withInt:(int32_t)heightUsed {
  ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ASAppBarLayout *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
  if (((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->height_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
    [((ADXCoordinatorLayout *) nil_chk(parent)) onMeasureChildWithADView:child withInt:parentWidthMeasureSpec withInt:widthUsed withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(0, ADView_MeasureSpec_UNSPECIFIED) withInt:heightUsed];
    return true;
  }
  return [super onMeasureChildWithADXCoordinatorLayout:parent withADView:child withInt:parentWidthMeasureSpec withInt:widthUsed withInt:parentHeightMeasureSpec withInt:heightUsed];
}

- (bool)onLayoutChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                   withADView:(ASAppBarLayout *)abl
                                      withInt:(int32_t)layoutDirection {
  bool handled = [super onLayoutChildWithADXCoordinatorLayout:parent withADView:abl withInt:layoutDirection];
  int32_t pendingAction = [((ASAppBarLayout *) nil_chk(abl)) getPendingAction];
  if (savedState_ != nil && (pendingAction & ASAppBarLayout_PENDING_ACTION_FORCE) == 0) {
    if (savedState_->fullyScrolled_) {
      [self setHeaderTopBottomOffsetWithADXCoordinatorLayout:parent withADView:abl withInt:-ASAppBarLayout_getTotalScrollRange(abl)];
    }
    else if (savedState_->fullyExpanded_) {
      [self setHeaderTopBottomOffsetWithADXCoordinatorLayout:parent withADView:abl withInt:0];
    }
    else {
      ADView *child = [abl getChildAtWithInt:savedState_->firstVisibleChildIndex_];
      int32_t offset = -[((ADView *) nil_chk(child)) getBottom];
      if (((ASAppBarLayout_SavedState *) nil_chk(savedState_))->firstVisibleChildAtMinimumHeight_) {
        offset += ADXViewCompat_getMinimumHeightWithADView_(child) + ASAppBarLayout_getTopInset(abl);
      }
      else {
        offset += JavaLangMath_roundWithFloat_([child getHeight] * ((ASAppBarLayout_SavedState *) nil_chk(savedState_))->firstVisibleChildPercentageShown_);
      }
      [self setHeaderTopBottomOffsetWithADXCoordinatorLayout:parent withADView:abl withInt:offset];
    }
  }
  else if (pendingAction != ASAppBarLayout_PENDING_ACTION_NONE) {
    bool animate = (pendingAction & ASAppBarLayout_PENDING_ACTION_ANIMATE_ENABLED) != 0;
    if ((pendingAction & ASAppBarLayout_PENDING_ACTION_COLLAPSED) != 0) {
      int32_t offset = -[abl getUpNestedPreScrollRange];
      if (animate) {
        ASAppBarLayout_BaseBehavior_animateOffsetToWithADXCoordinatorLayout_withASAppBarLayout_withInt_withFloat_(self, parent, abl, offset, 0);
      }
      else {
        [self setHeaderTopBottomOffsetWithADXCoordinatorLayout:parent withADView:abl withInt:offset];
      }
    }
    else if ((pendingAction & ASAppBarLayout_PENDING_ACTION_EXPANDED) != 0) {
      if (animate) {
        ASAppBarLayout_BaseBehavior_animateOffsetToWithADXCoordinatorLayout_withASAppBarLayout_withInt_withFloat_(self, parent, abl, 0, 0);
      }
      else {
        [self setHeaderTopBottomOffsetWithADXCoordinatorLayout:parent withADView:abl withInt:0];
      }
    }
  }
  [abl resetPendingAction];
  savedState_ = nil;
  [self setTopAndBottomOffsetWithInt:ADMathUtils_clampWithInt_withInt_withInt_([self getTopAndBottomOffset], -ASAppBarLayout_getTotalScrollRange(abl), 0)];
  ASAppBarLayout_BaseBehavior_updateAppBarLayoutDrawableStateWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_withBoolean_(self, parent, abl, [self getTopAndBottomOffset], 0, true);
  [abl onOffsetChangedWithInt:[self getTopAndBottomOffset]];
  ASAppBarLayout_BaseBehavior_updateAccessibilityActionsWithADXCoordinatorLayout_withASAppBarLayout_(self, parent, abl);
  return handled;
}

- (void)updateAccessibilityActionsWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                        withASAppBarLayout:(ASAppBarLayout *)appBarLayout {
  ASAppBarLayout_BaseBehavior_updateAccessibilityActionsWithADXCoordinatorLayout_withASAppBarLayout_(self, coordinatorLayout, appBarLayout);
}

- (ADView *)getChildWithScrollingBehaviorWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout {
  return ASAppBarLayout_BaseBehavior_getChildWithScrollingBehaviorWithADXCoordinatorLayout_(self, coordinatorLayout);
}

- (bool)childrenHaveScrollFlagsWithASAppBarLayout:(ASAppBarLayout *)appBarLayout {
  return ASAppBarLayout_BaseBehavior_childrenHaveScrollFlagsWithASAppBarLayout_(self, appBarLayout);
}

- (bool)addAccessibilityScrollActionsWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                           withASAppBarLayout:(ASAppBarLayout *)appBarLayout
                                                   withADView:(ADView *)scrollingView {
  return ASAppBarLayout_BaseBehavior_addAccessibilityScrollActionsWithADXCoordinatorLayout_withASAppBarLayout_withADView_(self, coordinatorLayout, appBarLayout, scrollingView);
}

- (bool)canDragViewWithADView:(ASAppBarLayout *)view {
  if (onDragCallback_ != nil) {
    return [onDragCallback_ canDragWithASAppBarLayout:view];
  }
  if (lastNestedScrollingChildRef_ != nil) {
    ADView *scrollingView = [lastNestedScrollingChildRef_ get];
    return scrollingView != nil && [scrollingView isShown] && ![scrollingView canScrollVerticallyWithInt:-1];
  }
  else {
    return true;
  }
}

- (void)onFlingFinishedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                     withADView:(ASAppBarLayout *)layout {
  ASAppBarLayout_BaseBehavior_snapToChildIfNeededWithADXCoordinatorLayout_withASAppBarLayout_(self, parent, layout);
  if ([((ASAppBarLayout *) nil_chk(layout)) isLiftOnScroll]) {
    [layout setLiftedStateWithBoolean:[layout shouldLiftWithADView:ASAppBarLayout_BaseBehavior_findFirstScrollingChildWithADXCoordinatorLayout_(self, parent)]];
  }
}

- (int32_t)getMaxDragOffsetWithADView:(ASAppBarLayout *)view {
  return -[((ASAppBarLayout *) nil_chk(view)) getDownNestedScrollRange] + ASAppBarLayout_getTopInset(view);
}

- (int32_t)getScrollRangeForDragFlingWithADView:(ASAppBarLayout *)view {
  return ASAppBarLayout_getTotalScrollRange(nil_chk(view));
}

- (int32_t)setHeaderTopBottomOffsetWithADXCoordinatorLayout:(ADXCoordinatorLayout *)coordinatorLayout
                                                 withADView:(ASAppBarLayout *)appBarLayout
                                                    withInt:(int32_t)newOffset
                                                    withInt:(int32_t)minOffset
                                                    withInt:(int32_t)maxOffset {
  int32_t curOffset = [self getTopBottomOffsetForScrollingSibling];
  int32_t consumed = 0;
  if (minOffset != 0 && curOffset >= minOffset && curOffset <= maxOffset) {
    newOffset = ADMathUtils_clampWithInt_withInt_withInt_(newOffset, minOffset, maxOffset);
    if (curOffset != newOffset) {
      int32_t interpolatedOffset = [((ASAppBarLayout *) nil_chk(appBarLayout)) hasChildWithInterpolator] ? ASAppBarLayout_BaseBehavior_interpolateOffsetWithASAppBarLayout_withInt_(self, appBarLayout, newOffset) : newOffset;
      bool offsetChanged = [self setTopAndBottomOffsetWithInt:interpolatedOffset];
      consumed = curOffset - newOffset;
      offsetDelta_ = newOffset - interpolatedOffset;
      if (offsetChanged) {
        for (int32_t i = 0; i < [appBarLayout getChildCount]; i++) {
          ASAppBarLayout_LayoutParams *params = (ASAppBarLayout_LayoutParams *) cast_chk([((ADView *) nil_chk([appBarLayout getChildAtWithInt:i])) getLayoutParams], [ASAppBarLayout_LayoutParams class]);
          ASAppBarLayout_ChildScrollEffect *scrollEffect = [((ASAppBarLayout_LayoutParams *) nil_chk(params)) getScrollEffect];
          if (scrollEffect != nil && ([params getScrollFlags] & ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL) != 0) {
            [scrollEffect onOffsetChangedWithASAppBarLayout:appBarLayout withADView:[appBarLayout getChildAtWithInt:i] withFloat:[self getTopAndBottomOffset]];
          }
        }
      }
      if (!offsetChanged && [appBarLayout hasChildWithInterpolator]) {
        [((ADXCoordinatorLayout *) nil_chk(coordinatorLayout)) dispatchDependentViewsChangedWithADView:appBarLayout];
      }
      [appBarLayout onOffsetChangedWithInt:[self getTopAndBottomOffset]];
      ASAppBarLayout_BaseBehavior_updateAppBarLayoutDrawableStateWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_withBoolean_(self, coordinatorLayout, appBarLayout, newOffset, newOffset < curOffset ? -1 : 1, false);
    }
  }
  else {
    offsetDelta_ = 0;
  }
  ASAppBarLayout_BaseBehavior_updateAccessibilityActionsWithADXCoordinatorLayout_withASAppBarLayout_(self, coordinatorLayout, appBarLayout);
  return consumed;
}

- (bool)isOffsetAnimatorRunning {
  return offsetAnimator_ != nil && [offsetAnimator_ isRunning];
}

- (int32_t)interpolateOffsetWithASAppBarLayout:(ASAppBarLayout *)layout
                                       withInt:(int32_t)offset {
  return ASAppBarLayout_BaseBehavior_interpolateOffsetWithASAppBarLayout_withInt_(self, layout, offset);
}

- (void)updateAppBarLayoutDrawableStateWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                             withASAppBarLayout:(ASAppBarLayout *)layout
                                                        withInt:(int32_t)offset
                                                        withInt:(int32_t)direction
                                                    withBoolean:(bool)forceJump {
  ASAppBarLayout_BaseBehavior_updateAppBarLayoutDrawableStateWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_withBoolean_(self, parent, layout, offset, direction, forceJump);
}

- (bool)shouldJumpElevationStateWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                      withASAppBarLayout:(ASAppBarLayout *)layout {
  return ASAppBarLayout_BaseBehavior_shouldJumpElevationStateWithADXCoordinatorLayout_withASAppBarLayout_(self, parent, layout);
}

+ (ADView *)getAppBarChildOnOffsetWithASAppBarLayout:(ASAppBarLayout *)layout
                                             withInt:(int32_t)offset {
  return ASAppBarLayout_BaseBehavior_getAppBarChildOnOffsetWithASAppBarLayout_withInt_(layout, offset);
}

- (ADView *)findFirstScrollingChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent {
  return ASAppBarLayout_BaseBehavior_findFirstScrollingChildWithADXCoordinatorLayout_(self, parent);
}

- (int32_t)getTopBottomOffsetForScrollingSibling {
  return [self getTopAndBottomOffset] + offsetDelta_;
}

- (void)restoreScrollStateWithASAppBarLayout_SavedState:(ASAppBarLayout_SavedState *)state
                                            withBoolean:(bool)force {
  if (savedState_ == nil || force) {
    savedState_ = state;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "I", 0x2, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, 28, -1, -1 },
    { NULL, "I", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 33, 34, -1, 35, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x2, 39, 27, -1, 28, -1, -1 },
    { NULL, "LADView;", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 44, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x0, 45, 43, -1, 46, -1, -1 },
    { NULL, "V", 0x0, 47, 27, -1, 28, -1, -1 },
    { NULL, "I", 0x0, 48, 43, -1, 49, -1, -1 },
    { NULL, "I", 0x0, 50, 43, -1, 49, -1, -1 },
    { NULL, "I", 0x0, 51, 52, -1, 53, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 54, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, 57, -1, -1 },
    { NULL, "Z", 0x2, 58, 27, -1, 59, -1, -1 },
    { NULL, "LADView;", 0xa, 60, 24, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 61, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 62, 63, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onStartNestedScrollWithADXCoordinatorLayout:withADView:withADView:withADView:withInt:withInt:);
  methods[2].selector = @selector(canScrollChildrenWithADXCoordinatorLayout:withASAppBarLayout:withADView:);
  methods[3].selector = @selector(onNestedPreScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withIntArray:withInt:);
  methods[4].selector = @selector(onNestedScrollWithADXCoordinatorLayout:withADView:withADView:withInt:withInt:withInt:withInt:withInt:withIntArray:);
  methods[5].selector = @selector(onStopNestedScrollWithADXCoordinatorLayout:withADView:withADView:withInt:);
  methods[6].selector = @selector(setDragCallbackWithASAppBarLayout_BaseBehavior_BaseDragCallback:);
  methods[7].selector = @selector(animateOffsetToWithADXCoordinatorLayout:withASAppBarLayout:withInt:withFloat:);
  methods[8].selector = @selector(animateOffsetWithDurationWithADXCoordinatorLayout:withASAppBarLayout:withInt:withInt:);
  methods[9].selector = @selector(getChildIndexOnOffsetWithASAppBarLayout:withInt:);
  methods[10].selector = @selector(snapToChildIfNeededWithADXCoordinatorLayout:withASAppBarLayout:);
  methods[11].selector = @selector(calculateSnapOffsetWithInt:withInt:withInt:);
  methods[12].selector = @selector(checkFlagWithInt:withInt:);
  methods[13].selector = @selector(onMeasureChildWithADXCoordinatorLayout:withADView:withInt:withInt:withInt:withInt:);
  methods[14].selector = @selector(onLayoutChildWithADXCoordinatorLayout:withADView:withInt:);
  methods[15].selector = @selector(updateAccessibilityActionsWithADXCoordinatorLayout:withASAppBarLayout:);
  methods[16].selector = @selector(getChildWithScrollingBehaviorWithADXCoordinatorLayout:);
  methods[17].selector = @selector(childrenHaveScrollFlagsWithASAppBarLayout:);
  methods[18].selector = @selector(addAccessibilityScrollActionsWithADXCoordinatorLayout:withASAppBarLayout:withADView:);
  methods[19].selector = @selector(canDragViewWithADView:);
  methods[20].selector = @selector(onFlingFinishedWithADXCoordinatorLayout:withADView:);
  methods[21].selector = @selector(getMaxDragOffsetWithADView:);
  methods[22].selector = @selector(getScrollRangeForDragFlingWithADView:);
  methods[23].selector = @selector(setHeaderTopBottomOffsetWithADXCoordinatorLayout:withADView:withInt:withInt:withInt:);
  methods[24].selector = @selector(isOffsetAnimatorRunning);
  methods[25].selector = @selector(interpolateOffsetWithASAppBarLayout:withInt:);
  methods[26].selector = @selector(updateAppBarLayoutDrawableStateWithADXCoordinatorLayout:withASAppBarLayout:withInt:withInt:withBoolean:);
  methods[27].selector = @selector(shouldJumpElevationStateWithADXCoordinatorLayout:withASAppBarLayout:);
  methods[28].selector = @selector(getAppBarChildOnOffsetWithASAppBarLayout:withInt:);
  methods[29].selector = @selector(findFirstScrollingChildWithADXCoordinatorLayout:);
  methods[30].selector = @selector(getTopBottomOffsetForScrollingSibling);
  methods[31].selector = @selector(restoreScrollStateWithASAppBarLayout_SavedState:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_OFFSET_ANIMATION_DURATION", "I", .constantValue.asInt = ASAppBarLayout_BaseBehavior_MAX_OFFSET_ANIMATION_DURATION, 0x1a, -1, -1, -1, -1 },
    { "offsetDelta_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastStartedType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetAnimator_", "LADValueAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedState_", "LASAppBarLayout_SavedState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastNestedScrollingChildRef_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 64, -1 },
    { "onDragCallback_", "LASAppBarLayout_BaseBehavior_BaseDragCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "coordinatorLayoutA11yScrollable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onStartNestedScroll", "LADXCoordinatorLayout;LASAppBarLayout;LADView;LADView;II", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;Lr/android/view/View;Lr/android/view/View;II)Z", "canScrollChildren", "LADXCoordinatorLayout;LASAppBarLayout;LADView;", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;Lr/android/view/View;)Z", "onNestedPreScroll", "LADXCoordinatorLayout;LASAppBarLayout;LADView;II[II", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;Lr/android/view/View;II[II)V", "onNestedScroll", "LADXCoordinatorLayout;LASAppBarLayout;LADView;IIIII[I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;Lr/android/view/View;IIIII[I)V", "onStopNestedScroll", "LADXCoordinatorLayout;LASAppBarLayout;LADView;I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;Lr/android/view/View;I)V", "setDragCallback", "LASAppBarLayout_BaseBehavior_BaseDragCallback;", "animateOffsetTo", "LADXCoordinatorLayout;LASAppBarLayout;IF", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;IF)V", "animateOffsetWithDuration", "LADXCoordinatorLayout;LASAppBarLayout;II", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;II)V", "getChildIndexOnOffset", "LASAppBarLayout;I", "(TT;I)I", "snapToChildIfNeeded", "LADXCoordinatorLayout;LASAppBarLayout;", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;)V", "calculateSnapOffset", "III", "checkFlag", "II", "onMeasureChild", "LADXCoordinatorLayout;LASAppBarLayout;IIII", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;IIII)Z", "onLayoutChild", "LADXCoordinatorLayout;LASAppBarLayout;I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;I)Z", "updateAccessibilityActions", "getChildWithScrollingBehavior", "LADXCoordinatorLayout;", "childrenHaveScrollFlags", "LASAppBarLayout;", "addAccessibilityScrollActions", "canDragView", "(TT;)Z", "onFlingFinished", "getMaxDragOffset", "(TT;)I", "getScrollRangeForDragFling", "setHeaderTopBottomOffset", "LADXCoordinatorLayout;LASAppBarLayout;III", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;III)I", "interpolateOffset", "updateAppBarLayoutDrawableState", "LADXCoordinatorLayout;LASAppBarLayout;IIZ", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;IIZ)V", "shouldJumpElevationState", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TT;)Z", "getAppBarChildOnOffset", "findFirstScrollingChild", "restoreScrollState", "LASAppBarLayout_SavedState;Z", "Ljava/lang/ref/WeakReference<Lr/android/view/View;>;", "<T:Lcom/google/android/material/appbar/AppBarLayout;>Lcom/google/android/material/appbar/HeaderBehavior<TT;>;" };
  static const J2ObjcClassInfo _ASAppBarLayout_BaseBehavior = { "BaseBehavior", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0xc, 32, 8, 43, 16, -1, 65, -1 };
  return &_ASAppBarLayout_BaseBehavior;
}

@end

void ASAppBarLayout_BaseBehavior_init(ASAppBarLayout_BaseBehavior *self) {
  ASHeaderBehavior_initPackagePrivate(self);
}

ASAppBarLayout_BaseBehavior *new_ASAppBarLayout_BaseBehavior_init() {
  J2OBJC_NEW_IMPL(ASAppBarLayout_BaseBehavior, init)
}

ASAppBarLayout_BaseBehavior *create_ASAppBarLayout_BaseBehavior_init() {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_BaseBehavior, init)
}

bool ASAppBarLayout_BaseBehavior_canScrollChildrenWithADXCoordinatorLayout_withASAppBarLayout_withADView_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent, ASAppBarLayout *child, ADView *directTargetChild) {
  return [((ASAppBarLayout *) nil_chk(child)) hasScrollableChildren] && [((ADXCoordinatorLayout *) nil_chk(parent)) getHeight] - [((ADView *) nil_chk(directTargetChild)) getHeight] <= [child getHeight];
}

void ASAppBarLayout_BaseBehavior_animateOffsetToWithADXCoordinatorLayout_withASAppBarLayout_withInt_withFloat_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *child, int32_t offset, float velocity) {
  int32_t distance = JavaLangMath_absWithInt_([self getTopBottomOffsetForScrollingSibling] - offset);
  int32_t duration;
  velocity = JavaLangMath_absWithFloat_(velocity);
  if (velocity > 0) {
    duration = 3 * JavaLangMath_roundWithFloat_(1000 * (distance / velocity));
  }
  else {
    float distanceRatio = (float) distance / [((ASAppBarLayout *) nil_chk(child)) getHeight];
    duration = JreFpToInt(((distanceRatio + 1) * 150));
  }
  ASAppBarLayout_BaseBehavior_animateOffsetWithDurationWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_(self, coordinatorLayout, child, offset, duration);
}

void ASAppBarLayout_BaseBehavior_animateOffsetWithDurationWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *child, int32_t offset, int32_t duration) {
  int32_t currentOffset = [self getTopBottomOffsetForScrollingSibling];
  if (currentOffset == offset) {
    if (self->offsetAnimator_ != nil && [self->offsetAnimator_ isRunning]) {
      [self->offsetAnimator_ cancel];
    }
    return;
  }
  if (self->offsetAnimator_ == nil) {
    self->offsetAnimator_ = new_ADValueAnimator_init();
    [self->offsetAnimator_ setInterpolatorWithADTimeInterpolator:new_ADDecelerateInterpolator_init()];
    [((ADValueAnimator *) nil_chk(self->offsetAnimator_)) addUpdateListenerWithADValueAnimator_AnimatorUpdateListener:new_ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(self, coordinatorLayout, child)];
  }
  else {
    [self->offsetAnimator_ cancel];
  }
  (void) [((ADValueAnimator *) nil_chk(self->offsetAnimator_)) setDurationWithLong:JavaLangMath_minWithInt_withInt_(duration, ASAppBarLayout_BaseBehavior_MAX_OFFSET_ANIMATION_DURATION)];
  [((ADValueAnimator *) nil_chk(self->offsetAnimator_)) setIntValuesWithIntArray:[IOSIntArray newArrayWithInts:(int32_t[]){ currentOffset, offset } count:2]];
  [((ADValueAnimator *) nil_chk(self->offsetAnimator_)) start];
}

int32_t ASAppBarLayout_BaseBehavior_getChildIndexOnOffsetWithASAppBarLayout_withInt_(ASAppBarLayout_BaseBehavior *self, ASAppBarLayout *abl, int32_t offset) {
  for (int32_t i = 0, count = [((ASAppBarLayout *) nil_chk(abl)) getChildCount]; i < count; i++) {
    ADView *child = [abl getChildAtWithInt:i];
    int32_t top = [((ADView *) nil_chk(child)) getTop];
    int32_t bottom = [child getBottom];
    ASAppBarLayout_LayoutParams *lp = (ASAppBarLayout_LayoutParams *) cast_chk([child getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    if (ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_([((ASAppBarLayout_LayoutParams *) nil_chk(lp)) getScrollFlags], ASAppBarLayout_LayoutParams_SCROLL_FLAG_SNAP_MARGINS)) {
      top -= lp->topMargin_;
      bottom += lp->bottomMargin_;
    }
    if (top <= -offset && bottom >= -offset) {
      return i;
    }
  }
  return -1;
}

void ASAppBarLayout_BaseBehavior_snapToChildIfNeededWithADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *abl) {
  int32_t topInset = ASAppBarLayout_getTopInset(nil_chk(abl)) + [abl getPaddingTop];
  int32_t offset = [self getTopBottomOffsetForScrollingSibling] - topInset;
  int32_t offsetChildIndex = ASAppBarLayout_BaseBehavior_getChildIndexOnOffsetWithASAppBarLayout_withInt_(self, abl, offset);
  if (offsetChildIndex >= 0) {
    ADView *offsetChild = [abl getChildAtWithInt:offsetChildIndex];
    ASAppBarLayout_LayoutParams *lp = (ASAppBarLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(offsetChild)) getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    int32_t flags = [((ASAppBarLayout_LayoutParams *) nil_chk(lp)) getScrollFlags];
    if ((flags & ASAppBarLayout_LayoutParams_FLAG_SNAP) == ASAppBarLayout_LayoutParams_FLAG_SNAP) {
      int32_t snapTop = -[offsetChild getTop];
      int32_t snapBottom = -[offsetChild getBottom];
      if (offsetChildIndex == 0 && ADXViewCompat_getFitsSystemWindowsWithADView_(abl) && ADXViewCompat_getFitsSystemWindowsWithADView_(offsetChild)) {
        snapTop -= ASAppBarLayout_getTopInset(abl);
      }
      if (ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_(flags, ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED)) {
        snapBottom += ADXViewCompat_getMinimumHeightWithADView_(offsetChild);
      }
      else if (ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_(flags, ASAppBarLayout_LayoutParams_FLAG_QUICK_RETURN | ASAppBarLayout_LayoutParams_SCROLL_FLAG_ENTER_ALWAYS)) {
        int32_t seam = snapBottom + ADXViewCompat_getMinimumHeightWithADView_(offsetChild);
        if (offset < seam) {
          snapTop = seam;
        }
        else {
          snapBottom = seam;
        }
      }
      if (ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_(flags, ASAppBarLayout_LayoutParams_SCROLL_FLAG_SNAP_MARGINS)) {
        snapTop += lp->topMargin_;
        snapBottom -= lp->bottomMargin_;
      }
      int32_t newOffset = ASAppBarLayout_BaseBehavior_calculateSnapOffsetWithInt_withInt_withInt_(self, offset, snapBottom, snapTop) + topInset;
      ASAppBarLayout_BaseBehavior_animateOffsetToWithADXCoordinatorLayout_withASAppBarLayout_withInt_withFloat_(self, coordinatorLayout, abl, ADMathUtils_clampWithInt_withInt_withInt_(newOffset, -ASAppBarLayout_getTotalScrollRange(abl), 0), 0);
    }
  }
}

int32_t ASAppBarLayout_BaseBehavior_calculateSnapOffsetWithInt_withInt_withInt_(ASAppBarLayout_BaseBehavior *self, int32_t value, int32_t bottom, int32_t top) {
  return value < JreIntDiv((bottom + top), 2) ? bottom : top;
}

bool ASAppBarLayout_BaseBehavior_checkFlagWithInt_withInt_(int32_t flags, int32_t check) {
  ASAppBarLayout_BaseBehavior_initialize();
  return (flags & check) == check;
}

void ASAppBarLayout_BaseBehavior_updateAccessibilityActionsWithADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *appBarLayout) {
  if (ASAppBarLayout_getTotalScrollRange(nil_chk(appBarLayout)) == 0) {
    return;
  }
  ADView *scrollingView = ASAppBarLayout_BaseBehavior_getChildWithScrollingBehaviorWithADXCoordinatorLayout_(self, coordinatorLayout);
  if (scrollingView == nil) {
    return;
  }
  if (!ASAppBarLayout_BaseBehavior_childrenHaveScrollFlagsWithASAppBarLayout_(self, appBarLayout)) {
    return;
  }
}

ADView *ASAppBarLayout_BaseBehavior_getChildWithScrollingBehaviorWithADXCoordinatorLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout) {
  int32_t childCount = [((ADXCoordinatorLayout *) nil_chk(coordinatorLayout)) getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [coordinatorLayout getChildAtWithInt:i];
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    if ([[((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getBehavior] isKindOfClass:[ASAppBarLayout_ScrollingViewBehavior class]]) {
      return child;
    }
  }
  return nil;
}

bool ASAppBarLayout_BaseBehavior_childrenHaveScrollFlagsWithASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ASAppBarLayout *appBarLayout) {
  int32_t childCount = [((ASAppBarLayout *) nil_chk(appBarLayout)) getChildCount];
  for (int32_t i = 0; i < childCount; i++) {
    ADView *child = [appBarLayout getChildAtWithInt:i];
    ASAppBarLayout_LayoutParams *childLp = (ASAppBarLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    int32_t flags = ((ASAppBarLayout_LayoutParams *) nil_chk(childLp))->scrollFlags_;
    if (flags != ASAppBarLayout_LayoutParams_SCROLL_FLAG_NO_SCROLL) {
      return true;
    }
  }
  return false;
}

bool ASAppBarLayout_BaseBehavior_addAccessibilityScrollActionsWithADXCoordinatorLayout_withASAppBarLayout_withADView_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *coordinatorLayout, ASAppBarLayout *appBarLayout, ADView *scrollingView) {
  bool a11yScrollable = false;
  if ([self getTopBottomOffsetForScrollingSibling] != -ASAppBarLayout_getTotalScrollRange(nil_chk(appBarLayout))) {
    a11yScrollable = true;
  }
  if ([self getTopBottomOffsetForScrollingSibling] != 0) {
    if ([((ADView *) nil_chk(scrollingView)) canScrollVerticallyWithInt:-1]) {
      int32_t dy = -[appBarLayout getDownNestedPreScrollRange];
      if (dy != 0) {
        a11yScrollable = true;
      }
    }
    else {
      a11yScrollable = true;
    }
  }
  return a11yScrollable;
}

int32_t ASAppBarLayout_BaseBehavior_interpolateOffsetWithASAppBarLayout_withInt_(ASAppBarLayout_BaseBehavior *self, ASAppBarLayout *layout, int32_t offset) {
  int32_t absOffset = JavaLangMath_absWithInt_(offset);
  for (int32_t i = 0, z = [((ASAppBarLayout *) nil_chk(layout)) getChildCount]; i < z; i++) {
    ADView *child = [layout getChildAtWithInt:i];
    ASAppBarLayout_LayoutParams *childLp = (ASAppBarLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    id<ADInterpolator> interpolator = [((ASAppBarLayout_LayoutParams *) nil_chk(childLp)) getScrollInterpolator];
    if (absOffset >= [child getTop] && absOffset <= [child getBottom]) {
      if (interpolator != nil) {
        int32_t childScrollableHeight = 0;
        int32_t flags = [childLp getScrollFlags];
        if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL) != 0) {
          childScrollableHeight += [child getHeight] + childLp->topMargin_ + childLp->bottomMargin_;
          if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED) != 0) {
            childScrollableHeight -= ADXViewCompat_getMinimumHeightWithADView_(child);
          }
        }
        if (ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
          childScrollableHeight -= ASAppBarLayout_getTopInset(layout);
        }
        if (childScrollableHeight > 0) {
          int32_t offsetForView = absOffset - [child getTop];
          int32_t interpolatedDiff = JavaLangMath_roundWithFloat_(childScrollableHeight * [interpolator getInterpolationWithFloat:offsetForView / (float) childScrollableHeight]);
          return JavaLangInteger_signumWithInt_(offset) * ([child getTop] + interpolatedDiff);
        }
      }
      break;
    }
  }
  return offset;
}

void ASAppBarLayout_BaseBehavior_updateAppBarLayoutDrawableStateWithADXCoordinatorLayout_withASAppBarLayout_withInt_withInt_withBoolean_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent, ASAppBarLayout *layout, int32_t offset, int32_t direction, bool forceJump) {
  ADView *child = ASAppBarLayout_BaseBehavior_getAppBarChildOnOffsetWithASAppBarLayout_withInt_(layout, offset);
  bool lifted = false;
  if (child != nil) {
    ASAppBarLayout_LayoutParams *childLp = (ASAppBarLayout_LayoutParams *) cast_chk([child getLayoutParams], [ASAppBarLayout_LayoutParams class]);
    int32_t flags = [((ASAppBarLayout_LayoutParams *) nil_chk(childLp)) getScrollFlags];
    if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_SCROLL) != 0) {
      int32_t minHeight = ADXViewCompat_getMinimumHeightWithADView_(child);
      if (direction > 0 && (flags & (ASAppBarLayout_LayoutParams_SCROLL_FLAG_ENTER_ALWAYS | ASAppBarLayout_LayoutParams_SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED)) != 0) {
        lifted = (-offset >= [child getBottom] - minHeight - ASAppBarLayout_getTopInset(nil_chk(layout)));
      }
      else if ((flags & ASAppBarLayout_LayoutParams_SCROLL_FLAG_EXIT_UNTIL_COLLAPSED) != 0) {
        lifted = (-offset >= [child getBottom] - minHeight - ASAppBarLayout_getTopInset(nil_chk(layout)));
      }
    }
  }
  if ([((ASAppBarLayout *) nil_chk(layout)) isLiftOnScroll]) {
    lifted = [layout shouldLiftWithADView:ASAppBarLayout_BaseBehavior_findFirstScrollingChildWithADXCoordinatorLayout_(self, parent)];
  }
  bool changed = [layout setLiftedStateWithBoolean:lifted];
  if (forceJump || (changed && ASAppBarLayout_BaseBehavior_shouldJumpElevationStateWithADXCoordinatorLayout_withASAppBarLayout_(self, parent, layout))) {
    if ([layout getBackground] != nil) {
      [((ADDrawable *) nil_chk([layout getBackground])) jumpToCurrentState];
    }
    if ([layout getForeground] != nil) {
      [((ADDrawable *) nil_chk([layout getForeground])) jumpToCurrentState];
    }
    if ([layout getStateListAnimator] != nil) {
      [((ADDrawable *) nil_chk([layout getStateListAnimator])) jumpToCurrentState];
    }
  }
}

bool ASAppBarLayout_BaseBehavior_shouldJumpElevationStateWithADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent, ASAppBarLayout *layout) {
  id<JavaUtilList> dependencies = new_JavaUtilArrayList_init();
  for (int32_t i = 0, size = [dependencies size]; i < size; i++) {
    ADView *dependency = [dependencies getWithInt:i];
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(dependency)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    ADXCoordinatorLayout_Behavior *behavior = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp)) getBehavior];
    if ([behavior isKindOfClass:[ASAppBarLayout_ScrollingViewBehavior class]]) {
      return [((ASAppBarLayout_ScrollingViewBehavior *) nil_chk(((ASAppBarLayout_ScrollingViewBehavior *) behavior))) getOverlayTop] != 0;
    }
  }
  return false;
}

ADView *ASAppBarLayout_BaseBehavior_getAppBarChildOnOffsetWithASAppBarLayout_withInt_(ASAppBarLayout *layout, int32_t offset) {
  ASAppBarLayout_BaseBehavior_initialize();
  int32_t absOffset = JavaLangMath_absWithInt_(offset);
  for (int32_t i = 0, z = [((ASAppBarLayout *) nil_chk(layout)) getChildCount]; i < z; i++) {
    ADView *child = [layout getChildAtWithInt:i];
    if (absOffset >= [((ADView *) nil_chk(child)) getTop] && absOffset <= [child getBottom]) {
      return child;
    }
  }
  return nil;
}

ADView *ASAppBarLayout_BaseBehavior_findFirstScrollingChildWithADXCoordinatorLayout_(ASAppBarLayout_BaseBehavior *self, ADXCoordinatorLayout *parent) {
  for (int32_t i = 0, z = [((ADXCoordinatorLayout *) nil_chk(parent)) getChildCount]; i < z; i++) {
    ADView *child = [parent getChildAtWithInt:i];
    if ([ADXNestedScrollingChild_class_() isInstance:child] || [child isKindOfClass:[ADAbsListView class]] || [child isKindOfClass:[ADScrollView class]]) {
      return child;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_BaseBehavior)

@implementation ASAppBarLayout_Behavior

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAppBarLayout_Behavior_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASAppBarLayout;", "Lcom/google/android/material/appbar/AppBarLayout$BaseBehavior<Lcom/google/android/material/appbar/AppBarLayout;>;" };
  static const J2ObjcClassInfo _ASAppBarLayout_Behavior = { "Behavior", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASAppBarLayout_Behavior;
}

@end

void ASAppBarLayout_Behavior_init(ASAppBarLayout_Behavior *self) {
  ASAppBarLayout_BaseBehavior_init(self);
}

ASAppBarLayout_Behavior *new_ASAppBarLayout_Behavior_init() {
  J2OBJC_NEW_IMPL(ASAppBarLayout_Behavior, init)
}

ASAppBarLayout_Behavior *create_ASAppBarLayout_Behavior_init() {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_Behavior, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_Behavior)

@implementation ASAppBarLayout_BaseBehavior_BaseDragCallback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAppBarLayout_BaseBehavior_BaseDragCallback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (bool)canDragWithASAppBarLayout:(ASAppBarLayout *)appBarLayout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(canDragWithASAppBarLayout:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "canDrag", "LASAppBarLayout;", "(TT;)Z", "LASAppBarLayout_BaseBehavior;", "<T:Lcom/google/android/material/appbar/AppBarLayout;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ASAppBarLayout_BaseBehavior_BaseDragCallback = { "BaseDragCallback", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x409, 2, 0, 3, -1, -1, 4, -1 };
  return &_ASAppBarLayout_BaseBehavior_BaseDragCallback;
}

@end

void ASAppBarLayout_BaseBehavior_BaseDragCallback_init(ASAppBarLayout_BaseBehavior_BaseDragCallback *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_BaseBehavior_BaseDragCallback)

@implementation ASAppBarLayout_BaseBehavior_1

- (instancetype)initWithASAppBarLayout_BaseBehavior:(ASAppBarLayout_BaseBehavior *)outer$
                           withADXCoordinatorLayout:(ADXCoordinatorLayout *)capture$0
                                 withASAppBarLayout:(ASAppBarLayout *)capture$1 {
  ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onAnimationUpdateWithADValueAnimator:(ADValueAnimator *)animator {
  [this$0_ setHeaderTopBottomOffsetWithADXCoordinatorLayout:val$coordinatorLayout_ withADView:val$child_ withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((ADValueAnimator *) nil_chk(animator)) getAnimatedValue], [JavaLangInteger class]))) intValue]];
  [((ADXCoordinatorLayout *) nil_chk(val$coordinatorLayout_)) onChildViewsChangedWithInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAppBarLayout_BaseBehavior:withADXCoordinatorLayout:withASAppBarLayout:);
  methods[1].selector = @selector(onAnimationUpdateWithADValueAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASAppBarLayout_BaseBehavior;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$coordinatorLayout_", "LADXCoordinatorLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LASAppBarLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LASAppBarLayout_BaseBehavior;LADXCoordinatorLayout;LASAppBarLayout;", "onAnimationUpdate", "LADValueAnimator;", "Lcom/google/android/material/appbar/AppBarLayout$BaseBehavior<TT;>;", "TT;", "LASAppBarLayout_BaseBehavior;", "animateOffsetWithDurationWithADXCoordinatorLayout:withASAppBarLayout:withInt:withInt:" };
  static const J2ObjcClassInfo _ASAppBarLayout_BaseBehavior_1 = { "", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0x8000, 2, 3, 5, -1, 6, -1, -1 };
  return &_ASAppBarLayout_BaseBehavior_1;
}

@end

void ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior_1 *self, ASAppBarLayout_BaseBehavior *outer$, ADXCoordinatorLayout *capture$0, ASAppBarLayout *capture$1) {
  self->this$0_ = outer$;
  self->val$coordinatorLayout_ = capture$0;
  self->val$child_ = capture$1;
  NSObject_init(self);
}

ASAppBarLayout_BaseBehavior_1 *new_ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *outer$, ADXCoordinatorLayout *capture$0, ASAppBarLayout *capture$1) {
  J2OBJC_NEW_IMPL(ASAppBarLayout_BaseBehavior_1, initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_, outer$, capture$0, capture$1)
}

ASAppBarLayout_BaseBehavior_1 *create_ASAppBarLayout_BaseBehavior_1_initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_(ASAppBarLayout_BaseBehavior *outer$, ADXCoordinatorLayout *capture$0, ASAppBarLayout *capture$1) {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_BaseBehavior_1, initWithASAppBarLayout_BaseBehavior_withADXCoordinatorLayout_withASAppBarLayout_, outer$, capture$0, capture$1)
}

@implementation ASAppBarLayout_ScrollingViewBehavior

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAppBarLayout_ScrollingViewBehavior_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (bool)layoutDependsOnWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                     withADView:(ADView *)child
                                     withADView:(ADView *)dependency {
  return [dependency isKindOfClass:[ASAppBarLayout class]];
}

- (bool)onDependentViewChangedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                            withADView:(ADView *)child
                                            withADView:(ADView *)dependency {
  ASAppBarLayout_ScrollingViewBehavior_offsetChildAsNeededWithADView_withADView_(self, child, dependency);
  ASAppBarLayout_ScrollingViewBehavior_updateLiftedStateIfNeededWithADView_withADView_(self, child, dependency);
  return false;
}

- (void)onDependentViewRemovedWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                            withADView:(ADView *)child
                                            withADView:(ADView *)dependency {
  if ([dependency isKindOfClass:[ASAppBarLayout class]]) {
  }
}

- (bool)onRequestChildRectangleOnScreenWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                                     withADView:(ADView *)child
                                                     withADRect:(ADRect *)rectangle
                                                    withBoolean:(bool)immediate {
  ASAppBarLayout *header = [self findFirstDependencyWithJavaUtilList:[((ADXCoordinatorLayout *) nil_chk(parent)) getDependenciesWithADView:child]];
  if (header != nil) {
    ADRect *offsetRect = new_ADRect_initWithADRect_(rectangle);
    [offsetRect offsetWithInt:[((ADView *) nil_chk(child)) getLeft] withInt:[child getTop]];
    ADRect *parentRect = tempRect1_;
    [((ADRect *) nil_chk(parentRect)) setWithInt:0 withInt:0 withInt:[parent getWidth] withInt:[parent getHeight]];
    if (![parentRect containsWithADRect:offsetRect]) {
      [header setExpandedWithBoolean:false withBoolean:!immediate];
      return true;
    }
  }
  return false;
}

- (void)offsetChildAsNeededWithADView:(ADView *)child
                           withADView:(ADView *)dependency {
  ASAppBarLayout_ScrollingViewBehavior_offsetChildAsNeededWithADView_withADView_(self, child, dependency);
}

- (float)getOverlapRatioForOffsetWithADView:(ADView *)header {
  if ([header isKindOfClass:[ASAppBarLayout class]]) {
    ASAppBarLayout *abl = (ASAppBarLayout *) header;
    int32_t totalScrollRange = ASAppBarLayout_getTotalScrollRange(nil_chk(abl));
    int32_t preScrollDown = [abl getDownNestedPreScrollRange];
    int32_t offset = ASAppBarLayout_ScrollingViewBehavior_getAppBarLayoutOffsetWithASAppBarLayout_(abl);
    if (preScrollDown != 0 && (totalScrollRange + offset) <= preScrollDown) {
      return 0;
    }
    else {
      int32_t availScrollRange = totalScrollRange - preScrollDown;
      if (availScrollRange != 0) {
        return 1.0f + (offset / (float) availScrollRange);
      }
    }
  }
  return 0.0f;
}

+ (int32_t)getAppBarLayoutOffsetWithASAppBarLayout:(ASAppBarLayout *)abl {
  return ASAppBarLayout_ScrollingViewBehavior_getAppBarLayoutOffsetWithASAppBarLayout_(abl);
}

- (ASAppBarLayout *)findFirstDependencyWithJavaUtilList:(id<JavaUtilList>)views {
  for (int32_t i = 0, z = [((id<JavaUtilList>) nil_chk(views)) size]; i < z; i++) {
    ADView *view = [views getWithInt:i];
    if ([view isKindOfClass:[ASAppBarLayout class]]) {
      return (ASAppBarLayout *) view;
    }
  }
  return nil;
}

- (int32_t)getScrollRangeWithADView:(ADView *)v {
  if ([v isKindOfClass:[ASAppBarLayout class]]) {
    return ASAppBarLayout_getTotalScrollRange(nil_chk(((ASAppBarLayout *) v)));
  }
  else {
    return [super getScrollRangeWithADView:v];
  }
}

- (void)updateLiftedStateIfNeededWithADView:(ADView *)child
                                 withADView:(ADView *)dependency {
  ASAppBarLayout_ScrollingViewBehavior_updateLiftedStateIfNeededWithADView_withADView_(self, child, dependency);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "LASAppBarLayout;", 0x0, 12, 13, -1, 14, -1, -1 },
    { NULL, "I", 0x0, 15, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(layoutDependsOnWithADXCoordinatorLayout:withADView:withADView:);
  methods[2].selector = @selector(onDependentViewChangedWithADXCoordinatorLayout:withADView:withADView:);
  methods[3].selector = @selector(onDependentViewRemovedWithADXCoordinatorLayout:withADView:withADView:);
  methods[4].selector = @selector(onRequestChildRectangleOnScreenWithADXCoordinatorLayout:withADView:withADRect:withBoolean:);
  methods[5].selector = @selector(offsetChildAsNeededWithADView:withADView:);
  methods[6].selector = @selector(getOverlapRatioForOffsetWithADView:);
  methods[7].selector = @selector(getAppBarLayoutOffsetWithASAppBarLayout:);
  methods[8].selector = @selector(findFirstDependencyWithJavaUtilList:);
  methods[9].selector = @selector(getScrollRangeWithADView:);
  methods[10].selector = @selector(updateLiftedStateIfNeededWithADView:withADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "layoutDependsOn", "LADXCoordinatorLayout;LADView;LADView;", "onDependentViewChanged", "onDependentViewRemoved", "onRequestChildRectangleOnScreen", "LADXCoordinatorLayout;LADView;LADRect;Z", "offsetChildAsNeeded", "LADView;LADView;", "getOverlapRatioForOffset", "LADView;", "getAppBarLayoutOffset", "LASAppBarLayout;", "findFirstDependency", "LJavaUtilList;", "(Ljava/util/List<Lr/android/view/View;>;)Lcom/google/android/material/appbar/AppBarLayout;", "getScrollRange", "updateLiftedStateIfNeeded" };
  static const J2ObjcClassInfo _ASAppBarLayout_ScrollingViewBehavior = { "ScrollingViewBehavior", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x9, 11, 0, 11, -1, -1, -1, -1 };
  return &_ASAppBarLayout_ScrollingViewBehavior;
}

@end

void ASAppBarLayout_ScrollingViewBehavior_init(ASAppBarLayout_ScrollingViewBehavior *self) {
  ASHeaderScrollingViewBehavior_initPackagePrivate(self);
}

ASAppBarLayout_ScrollingViewBehavior *new_ASAppBarLayout_ScrollingViewBehavior_init() {
  J2OBJC_NEW_IMPL(ASAppBarLayout_ScrollingViewBehavior, init)
}

ASAppBarLayout_ScrollingViewBehavior *create_ASAppBarLayout_ScrollingViewBehavior_init() {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_ScrollingViewBehavior, init)
}

void ASAppBarLayout_ScrollingViewBehavior_offsetChildAsNeededWithADView_withADView_(ASAppBarLayout_ScrollingViewBehavior *self, ADView *child, ADView *dependency) {
  ADXCoordinatorLayout_Behavior *behavior = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(((ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(dependency)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class])))) getBehavior];
  if ([behavior isKindOfClass:[ASAppBarLayout_BaseBehavior class]]) {
    ASAppBarLayout_BaseBehavior *ablBehavior = (ASAppBarLayout_BaseBehavior *) behavior;
    ADXViewCompat_offsetTopAndBottomWithADView_withInt_(child, ([dependency getBottom] - [((ADView *) nil_chk(child)) getTop]) + ((ASAppBarLayout_BaseBehavior *) nil_chk(ablBehavior))->offsetDelta_ + [self getVerticalLayoutGap] - [self getOverlapPixelsForOffsetWithADView:dependency]);
  }
}

int32_t ASAppBarLayout_ScrollingViewBehavior_getAppBarLayoutOffsetWithASAppBarLayout_(ASAppBarLayout *abl) {
  ASAppBarLayout_ScrollingViewBehavior_initialize();
  ADXCoordinatorLayout_Behavior *behavior = [((ADXCoordinatorLayout_LayoutParams *) nil_chk(((ADXCoordinatorLayout_LayoutParams *) cast_chk([((ASAppBarLayout *) nil_chk(abl)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class])))) getBehavior];
  if ([behavior isKindOfClass:[ASAppBarLayout_BaseBehavior class]]) {
    return [((ASAppBarLayout_BaseBehavior *) nil_chk(((ASAppBarLayout_BaseBehavior *) behavior))) getTopBottomOffsetForScrollingSibling];
  }
  return 0;
}

void ASAppBarLayout_ScrollingViewBehavior_updateLiftedStateIfNeededWithADView_withADView_(ASAppBarLayout_ScrollingViewBehavior *self, ADView *child, ADView *dependency) {
  if ([dependency isKindOfClass:[ASAppBarLayout class]]) {
    ASAppBarLayout *appBarLayout = (ASAppBarLayout *) dependency;
    if ([((ASAppBarLayout *) nil_chk(appBarLayout)) isLiftOnScroll]) {
      [appBarLayout setLiftedStateWithBoolean:[appBarLayout shouldLiftWithADView:child]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_ScrollingViewBehavior)

@implementation ASAppBarLayout_ChildScrollEffect

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAppBarLayout_ChildScrollEffect_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onOffsetChangedWithASAppBarLayout:(ASAppBarLayout *)appBarLayout
                               withADView:(ADView *)child
                                withFloat:(float)offset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onOffsetChangedWithASAppBarLayout:withADView:withFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onOffsetChanged", "LASAppBarLayout;LADView;F", "LASAppBarLayout;" };
  static const J2ObjcClassInfo _ASAppBarLayout_ChildScrollEffect = { "ChildScrollEffect", "com.google.android.material.appbar", ptrTable, methods, NULL, 7, 0x409, 2, 0, 2, -1, -1, -1, -1 };
  return &_ASAppBarLayout_ChildScrollEffect;
}

@end

void ASAppBarLayout_ChildScrollEffect_init(ASAppBarLayout_ChildScrollEffect *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_ChildScrollEffect)

@implementation ASAppBarLayout_SavedState

- (instancetype)initWithASAppBarLayout:(ASAppBarLayout *)outer$ {
  ASAppBarLayout_SavedState_initWithASAppBarLayout_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAppBarLayout:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fullyScrolled_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fullyExpanded_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "firstVisibleChildIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "firstVisibleChildPercentageShown_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "firstVisibleChildAtMinimumHeight_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASAppBarLayout;" };
  static const J2ObjcClassInfo _ASAppBarLayout_SavedState = { "SavedState", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0x0, 1, 5, 0, -1, -1, -1, -1 };
  return &_ASAppBarLayout_SavedState;
}

@end

void ASAppBarLayout_SavedState_initWithASAppBarLayout_(ASAppBarLayout_SavedState *self, ASAppBarLayout *outer$) {
  NSObject_init(self);
}

ASAppBarLayout_SavedState *new_ASAppBarLayout_SavedState_initWithASAppBarLayout_(ASAppBarLayout *outer$) {
  J2OBJC_NEW_IMPL(ASAppBarLayout_SavedState, initWithASAppBarLayout_, outer$)
}

ASAppBarLayout_SavedState *create_ASAppBarLayout_SavedState_initWithASAppBarLayout_(ASAppBarLayout *outer$) {
  J2OBJC_CREATE_IMPL(ASAppBarLayout_SavedState, initWithASAppBarLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAppBarLayout_SavedState)
