//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAppBarLayoutPlugin\src\main\java\com\google\android\material\appbar\HeaderScrollingViewBehavior.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_HeaderScrollingViewBehavior")
#ifdef RESTRICT_HeaderScrollingViewBehavior
#define INCLUDE_ALL_HeaderScrollingViewBehavior 0
#else
#define INCLUDE_ALL_HeaderScrollingViewBehavior 1
#endif
#undef RESTRICT_HeaderScrollingViewBehavior

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ASHeaderScrollingViewBehavior_) && (INCLUDE_ALL_HeaderScrollingViewBehavior || defined(INCLUDE_ASHeaderScrollingViewBehavior))
#define ASHeaderScrollingViewBehavior_

#define RESTRICT_ViewOffsetBehavior 1
#define INCLUDE_ASViewOffsetBehavior 1
#include "ViewOffsetBehavior.h"

@class ADAttributeSet;
@class ADContext;
@class ADRect;
@class ADView;
@class ADXCoordinatorLayout;
@protocol JavaUtilList;

/*!
 @brief The <code>Behavior</code> for a scrolling view that is positioned vertically below another view.See
  <code>com.google.android.material.appbar.HeaderBehavior</code>.
 */
@interface ASHeaderScrollingViewBehavior : ASViewOffsetBehavior {
 @public
  ADRect *tempRect1_;
  ADRect *tempRect2_;
}

#pragma mark Public

- (instancetype)initPackagePrivate;

- (instancetype)initPackagePrivateWithADContext:(ADContext *)context
                             withADAttributeSet:(ADAttributeSet *)attrs;

/*!
 @brief Returns the distance that this view should overlap any <code>com.google.android.material.appbar.AppBarLayout</code>
 .
 */
- (jint)getOverlayTop;

- (jboolean)onMeasureChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                        withADView:(ADView *)child
                                           withInt:(jint)parentWidthMeasureSpec
                                           withInt:(jint)widthUsed
                                           withInt:(jint)parentHeightMeasureSpec
                                           withInt:(jint)heightUsed;

/*!
 @brief Set the distance that this view should overlap any <code>com.google.android.material.appbar.AppBarLayout</code>
 .
 @param overlayTop the distance in px
 */
- (void)setOverlayTopWithInt:(jint)overlayTop;

#pragma mark Protected

- (void)layoutChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                 withADView:(ADView *)child
                                    withInt:(jint)layoutDirection;

- (jboolean)shouldHeaderOverlapScrollingChild;

#pragma mark Package-Private

- (ADView *)findFirstDependencyWithJavaUtilList:(id<JavaUtilList>)views;

- (jint)getOverlapPixelsForOffsetWithADView:(ADView *)header;

- (jfloat)getOverlapRatioForOffsetWithADView:(ADView *)header;

- (jint)getScrollRangeWithADView:(ADView *)v;

/*!
 @brief The gap between the top of the scrolling view and the bottom of the header layout in pixels.
 */
- (jint)getVerticalLayoutGap;

@end

J2OBJC_EMPTY_STATIC_INIT(ASHeaderScrollingViewBehavior)

J2OBJC_FIELD_SETTER(ASHeaderScrollingViewBehavior, tempRect1_, ADRect *)
J2OBJC_FIELD_SETTER(ASHeaderScrollingViewBehavior, tempRect2_, ADRect *)

FOUNDATION_EXPORT void ASHeaderScrollingViewBehavior_initPackagePrivate(ASHeaderScrollingViewBehavior *self);

FOUNDATION_EXPORT void ASHeaderScrollingViewBehavior_initPackagePrivateWithADContext_withADAttributeSet_(ASHeaderScrollingViewBehavior *self, ADContext *context, ADAttributeSet *attrs);

J2OBJC_TYPE_LITERAL_HEADER(ASHeaderScrollingViewBehavior)

@compatibility_alias ComGoogleAndroidMaterialAppbarHeaderScrollingViewBehavior ASHeaderScrollingViewBehavior;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_HeaderScrollingViewBehavior")
