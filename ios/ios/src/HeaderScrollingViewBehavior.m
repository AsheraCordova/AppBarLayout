//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAppBarLayoutPlugin\src\main\java\com\google\android\material\appbar\HeaderScrollingViewBehavior.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AttributeSet.h"
#include "Context.h"
#include "CoordinatorLayout.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "HeaderScrollingViewBehavior.h"
#include "J2ObjC_source.h"
#include "MathUtils.h"
#include "Rect.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewOffsetBehavior.h"
#include "WindowInsetsCompat.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASHeaderScrollingViewBehavior () {
 @public
  int32_t verticalLayoutGap_;
  int32_t overlayTop_;
}

+ (int32_t)resolveGravityWithInt:(int32_t)gravity;

@end

__attribute__((unused)) static int32_t ASHeaderScrollingViewBehavior_getOverlapPixelsForOffsetWithADView_(ASHeaderScrollingViewBehavior *self, ADView *header);

__attribute__((unused)) static int32_t ASHeaderScrollingViewBehavior_resolveGravityWithInt_(int32_t gravity);

@implementation ASHeaderScrollingViewBehavior

- (instancetype)initPackagePrivate {
  ASHeaderScrollingViewBehavior_initPackagePrivate(self);
  return self;
}

- (instancetype)initPackagePrivateWithADContext:(ADContext *)context
                             withADAttributeSet:(ADAttributeSet *)attrs {
  ASHeaderScrollingViewBehavior_initPackagePrivateWithADContext_withADAttributeSet_(self, context, attrs);
  return self;
}

- (bool)onMeasureChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                    withADView:(ADView *)child
                                       withInt:(int32_t)parentWidthMeasureSpec
                                       withInt:(int32_t)widthUsed
                                       withInt:(int32_t)parentHeightMeasureSpec
                                       withInt:(int32_t)heightUsed {
  int32_t childLpHeight = ((ADViewGroup_LayoutParams *) nil_chk([((ADView *) nil_chk(child)) getLayoutParams]))->height_;
  if (childLpHeight == ADViewGroup_LayoutParams_MATCH_PARENT || childLpHeight == ADViewGroup_LayoutParams_WRAP_CONTENT) {
    id<JavaUtilList> dependencies = [((ADXCoordinatorLayout *) nil_chk(parent)) getDependenciesWithADView:child];
    ADView *header = [self findFirstDependencyWithJavaUtilList:dependencies];
    if (header != nil) {
      int32_t availableHeight = ADView_MeasureSpec_getSizeWithInt_(parentHeightMeasureSpec);
      if (availableHeight > 0) {
        if (ADXViewCompat_getFitsSystemWindowsWithADView_(header)) {
          ADXWindowInsetsCompat *parentInsets = nil;
          if (parentInsets != nil) {
            availableHeight += [parentInsets getSystemWindowInsetTop] + [parentInsets getSystemWindowInsetBottom];
          }
        }
      }
      else {
        availableHeight = [parent getHeight];
      }
      int32_t height = availableHeight + [self getScrollRangeWithADView:header];
      int32_t headerHeight = [header getMeasuredHeight];
      if ([self shouldHeaderOverlapScrollingChild]) {
        [child setTranslationYWithFloat:-headerHeight];
      }
      else {
        [child setTranslationYWithFloat:0];
        height -= headerHeight;
      }
      int32_t heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(height, childLpHeight == ADViewGroup_LayoutParams_MATCH_PARENT ? ADView_MeasureSpec_EXACTLY : ADView_MeasureSpec_AT_MOST);
      [parent onMeasureChildWithADView:child withInt:parentWidthMeasureSpec withInt:widthUsed withInt:heightMeasureSpec withInt:heightUsed];
      return true;
    }
  }
  return false;
}

- (void)layoutChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                 withADView:(ADView *)child
                                    withInt:(int32_t)layoutDirection {
  id<JavaUtilList> dependencies = [((ADXCoordinatorLayout *) nil_chk(parent)) getDependenciesWithADView:child];
  ADView *header = [self findFirstDependencyWithJavaUtilList:dependencies];
  if (header != nil) {
    ADXCoordinatorLayout_LayoutParams *lp = (ADXCoordinatorLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]);
    ADRect *available = tempRect1_;
    [((ADRect *) nil_chk(available)) setWithInt:[parent getPaddingLeft] + ((ADXCoordinatorLayout_LayoutParams *) nil_chk(lp))->leftMargin_ withInt:[header getBottom] + lp->topMargin_ withInt:[parent getWidth] - [parent getPaddingRight] - lp->rightMargin_ withInt:[parent getHeight] + [header getBottom] - [parent getPaddingBottom] - lp->bottomMargin_];
    ADXWindowInsetsCompat *parentInsets = nil;
    if (parentInsets != nil && ADXViewCompat_getFitsSystemWindowsWithADView_(parent) && !ADXViewCompat_getFitsSystemWindowsWithADView_(child)) {
      available->left_ += [parentInsets getSystemWindowInsetLeft];
      available->right_ -= [parentInsets getSystemWindowInsetRight];
    }
    ADRect *out = tempRect2_;
    ADXGravityCompat_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(ASHeaderScrollingViewBehavior_resolveGravityWithInt_(lp->gravity_), [child getMeasuredWidth], [child getMeasuredHeight], available, out, layoutDirection);
    int32_t overlap = ASHeaderScrollingViewBehavior_getOverlapPixelsForOffsetWithADView_(self, header);
    [child layoutWithInt:((ADRect *) nil_chk(out))->left_ withInt:out->top_ - overlap withInt:out->right_ withInt:out->bottom_ - overlap];
    verticalLayoutGap_ = out->top_ - [header getBottom];
  }
  else {
    [super layoutChildWithADXCoordinatorLayout:parent withADView:child withInt:layoutDirection];
    verticalLayoutGap_ = 0;
  }
}

- (bool)shouldHeaderOverlapScrollingChild {
  return false;
}

- (float)getOverlapRatioForOffsetWithADView:(ADView *)header {
  return 1.0f;
}

- (int32_t)getOverlapPixelsForOffsetWithADView:(ADView *)header {
  return ASHeaderScrollingViewBehavior_getOverlapPixelsForOffsetWithADView_(self, header);
}

+ (int32_t)resolveGravityWithInt:(int32_t)gravity {
  return ASHeaderScrollingViewBehavior_resolveGravityWithInt_(gravity);
}

- (ADView *)findFirstDependencyWithJavaUtilList:(id<JavaUtilList>)views {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int32_t)getScrollRangeWithADView:(ADView *)v {
  return [((ADView *) nil_chk(v)) getMeasuredHeight];
}

- (int32_t)getVerticalLayoutGap {
  return verticalLayoutGap_;
}

- (void)setOverlayTopWithInt:(int32_t)overlayTop {
  self->overlayTop_ = overlayTop;
}

- (int32_t)getOverlayTop {
  return overlayTop_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x10, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x400, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x0, 13, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 14, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithADContext:withADAttributeSet:);
  methods[2].selector = @selector(onMeasureChildWithADXCoordinatorLayout:withADView:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(layoutChildWithADXCoordinatorLayout:withADView:withInt:);
  methods[4].selector = @selector(shouldHeaderOverlapScrollingChild);
  methods[5].selector = @selector(getOverlapRatioForOffsetWithADView:);
  methods[6].selector = @selector(getOverlapPixelsForOffsetWithADView:);
  methods[7].selector = @selector(resolveGravityWithInt:);
  methods[8].selector = @selector(findFirstDependencyWithJavaUtilList:);
  methods[9].selector = @selector(getScrollRangeWithADView:);
  methods[10].selector = @selector(getVerticalLayoutGap);
  methods[11].selector = @selector(setOverlayTopWithInt:);
  methods[12].selector = @selector(getOverlayTop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tempRect1_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tempRect2_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "verticalLayoutGap_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlayTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADContext;LADAttributeSet;", "onMeasureChild", "LADXCoordinatorLayout;LADView;IIII", "layoutChild", "LADXCoordinatorLayout;LADView;I", "getOverlapRatioForOffset", "LADView;", "getOverlapPixelsForOffset", "resolveGravity", "I", "findFirstDependency", "LJavaUtilList;", "(Ljava/util/List<Lr/android/view/View;>;)Lr/android/view/View;", "getScrollRange", "setOverlayTop", "Lcom/google/android/material/appbar/ViewOffsetBehavior<Lr/android/view/View;>;" };
  static const J2ObjcClassInfo _ASHeaderScrollingViewBehavior = { "HeaderScrollingViewBehavior", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0x400, 13, 4, -1, -1, -1, 15, -1 };
  return &_ASHeaderScrollingViewBehavior;
}

@end

void ASHeaderScrollingViewBehavior_initPackagePrivate(ASHeaderScrollingViewBehavior *self) {
  ASViewOffsetBehavior_initPackagePrivate(self);
  self->tempRect1_ = new_ADRect_init();
  self->tempRect2_ = new_ADRect_init();
  self->verticalLayoutGap_ = 0;
}

void ASHeaderScrollingViewBehavior_initPackagePrivateWithADContext_withADAttributeSet_(ASHeaderScrollingViewBehavior *self, ADContext *context, ADAttributeSet *attrs) {
  ASViewOffsetBehavior_initPackagePrivate(self);
  self->tempRect1_ = new_ADRect_init();
  self->tempRect2_ = new_ADRect_init();
  self->verticalLayoutGap_ = 0;
}

int32_t ASHeaderScrollingViewBehavior_getOverlapPixelsForOffsetWithADView_(ASHeaderScrollingViewBehavior *self, ADView *header) {
  return self->overlayTop_ == 0 ? 0 : ADMathUtils_clampWithInt_withInt_withInt_(JreFpToInt(([self getOverlapRatioForOffsetWithADView:header] * self->overlayTop_)), 0, self->overlayTop_);
}

int32_t ASHeaderScrollingViewBehavior_resolveGravityWithInt_(int32_t gravity) {
  ASHeaderScrollingViewBehavior_initialize();
  return gravity == ADGravity_NO_GRAVITY ? ADXGravityCompat_START | ADGravity_TOP : gravity;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHeaderScrollingViewBehavior)
