//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAppBarLayoutPlugin\src\main\java\com\google\android\material\appbar\ViewOffsetBehavior.java
//

#include "CoordinatorLayout.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "ViewOffsetBehavior.h"
#include "ViewOffsetHelper.h"


@interface ASViewOffsetBehavior () {
 @public
  ASViewOffsetHelper *viewOffsetHelper_;
  jint tempTopBottomOffset_;
  jint tempLeftRightOffset_;
}

@end

J2OBJC_FIELD_SETTER(ASViewOffsetBehavior, viewOffsetHelper_, ASViewOffsetHelper *)

@implementation ASViewOffsetBehavior

- (instancetype)initPackagePrivate {
  ASViewOffsetBehavior_initPackagePrivate(self);
  return self;
}

- (jboolean)onLayoutChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                       withADView:(ADView *)child
                                          withInt:(jint)layoutDirection {
  [self layoutChildWithADXCoordinatorLayout:parent withADView:child withInt:layoutDirection];
  if (viewOffsetHelper_ == nil) {
    viewOffsetHelper_ = new_ASViewOffsetHelper_initPackagePrivateWithADView_(child);
  }
  [viewOffsetHelper_ onViewLayout];
  [((ASViewOffsetHelper *) nil_chk(viewOffsetHelper_)) applyOffsets];
  if (tempTopBottomOffset_ != 0) {
    [((ASViewOffsetHelper *) nil_chk(viewOffsetHelper_)) setTopAndBottomOffsetWithInt:tempTopBottomOffset_];
    tempTopBottomOffset_ = 0;
  }
  if (tempLeftRightOffset_ != 0) {
    [((ASViewOffsetHelper *) nil_chk(viewOffsetHelper_)) setLeftAndRightOffsetWithInt:tempLeftRightOffset_];
    tempLeftRightOffset_ = 0;
  }
  return true;
}

- (void)layoutChildWithADXCoordinatorLayout:(ADXCoordinatorLayout *)parent
                                 withADView:(ADView *)child
                                    withInt:(jint)layoutDirection {
  [((ADXCoordinatorLayout *) nil_chk(parent)) onLayoutChildWithADView:child withInt:layoutDirection];
}

- (jboolean)setTopAndBottomOffsetWithInt:(jint)offset {
  if (viewOffsetHelper_ != nil) {
    return [viewOffsetHelper_ setTopAndBottomOffsetWithInt:offset];
  }
  else {
    tempTopBottomOffset_ = offset;
  }
  return false;
}

- (jboolean)setLeftAndRightOffsetWithInt:(jint)offset {
  if (viewOffsetHelper_ != nil) {
    return [viewOffsetHelper_ setLeftAndRightOffsetWithInt:offset];
  }
  else {
    tempLeftRightOffset_ = offset;
  }
  return false;
}

- (jint)getTopAndBottomOffset {
  return viewOffsetHelper_ != nil ? [viewOffsetHelper_ getTopAndBottomOffset] : 0;
}

- (jint)getLeftAndRightOffset {
  return viewOffsetHelper_ != nil ? [viewOffsetHelper_ getLeftAndRightOffset] : 0;
}

- (void)setVerticalOffsetEnabledWithBoolean:(jboolean)verticalOffsetEnabled {
  if (viewOffsetHelper_ != nil) {
    [viewOffsetHelper_ setVerticalOffsetEnabledWithBoolean:verticalOffsetEnabled];
  }
}

- (jboolean)isVerticalOffsetEnabled {
  return viewOffsetHelper_ != nil && [viewOffsetHelper_ isVerticalOffsetEnabled];
}

- (void)setHorizontalOffsetEnabledWithBoolean:(jboolean)horizontalOffsetEnabled {
  if (viewOffsetHelper_ != nil) {
    [viewOffsetHelper_ setHorizontalOffsetEnabledWithBoolean:horizontalOffsetEnabled];
  }
}

- (jboolean)isHorizontalOffsetEnabled {
  return viewOffsetHelper_ != nil && [viewOffsetHelper_ isHorizontalOffsetEnabled];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(onLayoutChildWithADXCoordinatorLayout:withADView:withInt:);
  methods[2].selector = @selector(layoutChildWithADXCoordinatorLayout:withADView:withInt:);
  methods[3].selector = @selector(setTopAndBottomOffsetWithInt:);
  methods[4].selector = @selector(setLeftAndRightOffsetWithInt:);
  methods[5].selector = @selector(getTopAndBottomOffset);
  methods[6].selector = @selector(getLeftAndRightOffset);
  methods[7].selector = @selector(setVerticalOffsetEnabledWithBoolean:);
  methods[8].selector = @selector(isVerticalOffsetEnabled);
  methods[9].selector = @selector(setHorizontalOffsetEnabledWithBoolean:);
  methods[10].selector = @selector(isHorizontalOffsetEnabled);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "viewOffsetHelper_", "LASViewOffsetHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tempTopBottomOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tempLeftRightOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onLayoutChild", "LADXCoordinatorLayout;LADView;I", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;I)Z", "layoutChild", "(Landroidx/coordinatorlayout/widget/CoordinatorLayout;TV;I)V", "setTopAndBottomOffset", "I", "setLeftAndRightOffset", "setVerticalOffsetEnabled", "Z", "setHorizontalOffsetEnabled", "<V:Lr/android/view/View;>Landroidx/coordinatorlayout/widget/CoordinatorLayout$Behavior<TV;>;" };
  static const J2ObjcClassInfo _ASViewOffsetBehavior = { "ViewOffsetBehavior", "com.google.android.material.appbar", ptrTable, methods, fields, 7, 0x0, 11, 3, -1, -1, -1, 11, -1 };
  return &_ASViewOffsetBehavior;
}

@end

void ASViewOffsetBehavior_initPackagePrivate(ASViewOffsetBehavior *self) {
  ADXCoordinatorLayout_Behavior_init(self);
  self->tempTopBottomOffset_ = 0;
  self->tempLeftRightOffset_ = 0;
}

ASViewOffsetBehavior *new_ASViewOffsetBehavior_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ASViewOffsetBehavior, initPackagePrivate)
}

ASViewOffsetBehavior *create_ASViewOffsetBehavior_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ASViewOffsetBehavior, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewOffsetBehavior)
